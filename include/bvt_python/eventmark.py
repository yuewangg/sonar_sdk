"""
This file was generated by bvtidl.pl.
Your changes will most likely be lost.
"""

from ctypes import *
import sys
import sdkerror


class EventMark(object):
    """
    An EventMark allows the user to insert arbitrary information into a sonar file.  The user can
    store two strings, one called a "Key" string and the other a "Text" string, in an EventMark. 
    The EventMarks are stored and retrieved independently of Heads or Pings.
    NOTE: EventMark objects will only be saved to a sonar of type FILE. 
    """
    def __init__(self, handle=None):
        super(EventMark, self).__setattr__("_initialized", False)
        self._deleted = False
        if handle is None:
            self._handle = dll.BVTEventMark_Create()
        else:
            self._handle = handle
        super(EventMark, self).__setattr__("_initialized", True)

    def __del__(self):
        self._deleted = True
        dll.BVTEventMark_Destroy(self._handle)

    def __setattr__(self, name, value):
        """ Don't allow setting non-existent attributes on this class
        """
        if self._initialized and not hasattr(self, name):
            raise AttributeError("%s instance has no attribute '%s'" % (self.__class__.__name__, name))
        super(EventMark, self).__setattr__(name, value)

    @property
    def timestamp(self):
        """
        Return the timestamp in seconds since 00:00:00 UTC, January 1, 1970 
        The timestamp is a standard UNIX time stamp. This is 
        a similar value to that returned by the time() C standard library 
        function. In fact, the only difference is the addition of fractional seconds.
        """
        timestamp = c_double()
        error_code = dll.BVTEventMark_GetTimestamp(self._handle, byref(timestamp))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return timestamp.value

    MAX_KEYLENGTH = 80
    @property
    def key_string_length(self):
        """
        Return the number of characters stored in the Key string, not including the null-term character.  You'll need to allocate a
        character buffer of at least length @ref GetKeyStringLength()+1 to retrieve the entire Key.
        You can also allocate a buffer of @ref MAX_KEYLENGTH at compile time.
        """
        length = c_int()
        error_code = dll.BVTEventMark_GetKeyStringLength(self._handle, byref(length))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return length.value

    @property
    def key_string(self):
        """
        Retrieves a copy of the EventMark's Key string.
        """
        buffer_size = 255
        buffer = create_string_buffer(buffer_size)
        error_code = dll.BVTEventMark_GetKeyString(self._handle, buffer, buffer_size)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (buffer.value)

    MAX_TEXTLENGTH = 512
    @property
    def text_string_length(self):
        """
        Return the number of characters stored in the Text string, not including the null-term character. You'll need to allocate a
        character buffer of at least length @ref GetTextStringLength()+1 to retrieve the entire string.
        You can also allocate a buffer of @ref MAX_TEXTLENGTH at compile time.
        """
        length = c_int()
        error_code = dll.BVTEventMark_GetTextStringLength(self._handle, byref(length))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return length.value

    @property
    def text_string(self):
        """
        Retrieves a copy of the EventMark's Text string.
        """
        buffer_size = 255
        buffer = create_string_buffer(buffer_size)
        error_code = dll.BVTEventMark_GetTextString(self._handle, buffer, buffer_size)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (buffer.value)

    @property
    def ping_number(self):
        """
        Return the "ping-by-time" number associated with the EventMark.
        This is typically the ping immediately before the EventMark was created.
        """
        number = c_int()
        error_code = dll.BVTEventMark_GetPingNumber(self._handle, byref(number))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return number.value


    def get_handle(self):
        """
        SDK object pointer
        """
        return self._handle
if "win32" in sys.platform:
    dll_name = "bvtsdk4.dll"
elif "darwin" in sys.platform:
    dll_name = "libbvtsdk.dylib"
else:
    dll_name = "libbvtsdk.so"
dll = CDLL(dll_name)
dll.BVTEventMark_Create.restype = c_void_p
dll.BVTEventMark_Destroy.restype = None
dll.BVTEventMark_Destroy.argtypes = (c_void_p,)
dll.BVTEventMark_GetTimestamp.restype = c_int
dll.BVTEventMark_GetTimestamp.argtypes = (c_void_p, POINTER(c_double), )
dll.BVTEventMark_GetKeyStringLength.restype = c_int
dll.BVTEventMark_GetKeyStringLength.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTEventMark_GetKeyString.restype = c_int
dll.BVTEventMark_GetKeyString.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTEventMark_GetTextStringLength.restype = c_int
dll.BVTEventMark_GetTextStringLength.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTEventMark_GetTextString.restype = c_int
dll.BVTEventMark_GetTextString.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTEventMark_GetPingNumber.restype = c_int
dll.BVTEventMark_GetPingNumber.argtypes = (c_void_p, POINTER(c_int), )


"""
This file was generated by bvtidl.pl.
Your changes will most likely be lost.
"""

from ctypes import *
import sys
import sdkerror


class MagImage(object):
    """
    MagImage is short for MagnitudeImage.  It provides access to a 2d 
    image where each pixel is intensity of the return from a particular
    point on a plane emanating from the head.  It can be thought of as 
    a 16bit grey-scale image.
    """
    def __init__(self, handle):
        super(MagImage, self).__setattr__("_initialized", False)
        self._deleted = False
        if handle is None or type(handle) is not c_void_p:
            raise Exception("Class MagImage cannot be directly instantiated")
        else:
            self._handle = handle
        super(MagImage, self).__setattr__("_initialized", True)

    def __del__(self):
        self._deleted = True
        dll.BVTMagImage_Destroy(self._handle)

    def __setattr__(self, name, value):
        """ Don't allow setting non-existent attributes on this class
        """
        if self._initialized and not hasattr(self, name):
            raise AttributeError("%s instance has no attribute '%s'" % (self.__class__.__name__, name))
        super(MagImage, self).__setattr__(name, value)

    def get_pixel(self, row, col):
        """
        Return the value of the pixel at (row, col)
        """
        pixel = c_ushort()
        error_code = dll.BVTMagImage_GetPixel(self._handle, row, col, byref(pixel))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return pixel.value

    def get_row(self, row):
        """
        Return a pointer to a row of pixels 
        """
        rowPointer = c_ushort()
        error_code = dll.BVTMagImage_GetRow(self._handle, row, byref(rowPointer))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return rowPointer.value

    @property
    def bits(self):
        """
        Return a pointer to the entire image.
        The image or organized in Row-Major order (just like C/C++).
        """
        bitsPointer = c_ushort()
        error_code = dll.BVTMagImage_GetBits(self._handle, byref(bitsPointer))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return bitsPointer.value

    def copy_bits(self, data, len):
        """
        Copy the raw image data to the user specified buffer. See GetBits for more info.
        """
        error_code = dll.BVTMagImage_CopyBits(self._handle, data, len)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def save_pgm(self, file_name):
        """
        Save the image in PGM (PortableGreyMap) format. http://en.wikipedia.org/wiki/Netpbm_format
        Note that few programs actually support loading a 16bit PGM. 
        A good image viewer for Windows is Irfanview: http://www.irfanview.com/ 
        Once you load a PGM, you will most likely need to tone map it or the majority of the image will appear black.
        """
        error_code = dll.BVTMagImage_SavePGM(self._handle, (file_name))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def height(self):
        """
        Return the height (in pixels) of this image
        """
        height = c_int()
        error_code = dll.BVTMagImage_GetHeight(self._handle, byref(height))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return height.value

    @property
    def width(self):
        """
        Return the width (in pixels) of this image
        """
        width = c_int()
        error_code = dll.BVTMagImage_GetWidth(self._handle, byref(width))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return width.value

    @property
    def max_range_of_pixel(self):
        """
        Return the max range (in meters) to a non-blank pixel in the image
        """
        maxRange = c_float()
        error_code = dll.BVTMagImage_GetMaxRangeOfPixel(self._handle, byref(maxRange))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return maxRange.value

    @property
    def image_type(self):
        """
        
        """
        type = c_int()
        error_code = dll.BVTMagImage_GetImageType(self._handle, byref(type))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return type.value

    @property
    def range_resolution(self):
        """
        Return the range resolution of this image.
        The resolution is returned in meters per pixel row.
        """
        resolution = c_double()
        error_code = dll.BVTMagImage_GetRangeResolution(self._handle, byref(resolution))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return resolution.value

    @property
    def bearing_resolution(self):
        """
        Only valid for R-Theta images.
        Returns the bearing resolution, in degrees per pixel column.
        """
        resolution = c_double()
        error_code = dll.BVTMagImage_GetBearingResolution(self._handle, byref(resolution))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return resolution.value

    @property
    def origin_row(self):
        """
        Retrieve the image row of the origin.
        In most cases the origin row will be outside of the image boundaries (i.e., negative). The origin is the 'location' (in pixels) of the sonar head in image plane.
        """
        row = c_int()
        error_code = dll.BVTMagImage_GetOriginRow(self._handle, byref(row))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return row.value

    @property
    def origin_col(self):
        """
        Retrieve the image column of the origin.
        The origin is the 'location' (in pixels) of the
        sonar head in image plane.
        """
        column = c_int()
        error_code = dll.BVTMagImage_GetOriginCol(self._handle, byref(column))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return column.value

    def get_pixel_range(self, row, col):
        """
        Retrieve the range (from the sonar head) of the specified pixel (in meters)
        """
        range = c_double()
        error_code = dll.BVTMagImage_GetPixelRange(self._handle, row, col, byref(range))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return range.value

    def get_pixel_relative_bearing(self, row, col):
        """
        Retrieve the bearing relative to the sonar head of the specified pixel
        """
        bearing = c_double()
        error_code = dll.BVTMagImage_GetPixelRelativeBearing(self._handle, row, col, byref(bearing))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return bearing.value

    def get_pixel_coordinate_at_range_bearing(self, range, bearing, x, y):
        """
        Return the pixel coordinate at the specified physical location.
        The returned coordinate may be outside this image's bounds.
        """
        error_code = dll.BVTMagImage_GetPixelCoordinateAtRangeBearing(self._handle, range, bearing, byref(x), byref(y))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def get_pixel_coordinate_at_xy(self, x_meters, y_meters, x, y):
        """
        Return the pixel coordinate at the specified physical location in the sonar's frame.
        The returned coordinate may be outside this image's bounds.
        """
        error_code = dll.BVTMagImage_GetPixelCoordinateAtXY(self._handle, x_meters, y_meters, byref(x), byref(y))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def fov_min_angle(self):
        """
        Return the minimum angle for the sonar's imaging field of view. 
        The angle is returned in degrees and referenced with respect to sonar head boresight (clockwise-positive).
        """
        angle = c_float()
        error_code = dll.BVTMagImage_GetFOVMinAngle(self._handle, byref(angle))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return angle.value

    @property
    def fov_max_angle(self):
        """
        Return the maximum angle for the sonar's imaging field of view. 
        The angle is returned in degrees and referenced with respect to sonar head boresight (clockwise-positive).
        """
        angle = c_float()
        error_code = dll.BVTMagImage_GetFOVMaxAngle(self._handle, byref(angle))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return angle.value


    def get_handle(self):
        """
        SDK object pointer
        """
        return self._handle
if "win32" in sys.platform:
    dll_name = "bvtsdk4.dll"
elif "darwin" in sys.platform:
    dll_name = "libbvtsdk.dylib"
else:
    dll_name = "libbvtsdk.so"
dll = CDLL(dll_name)
dll.BVTMagImage_Destroy.restype = None
dll.BVTMagImage_Destroy.argtypes = (c_void_p,)
dll.BVTMagImage_GetPixel.restype = c_int
dll.BVTMagImage_GetPixel.argtypes = (c_void_p, c_int, c_int, POINTER(c_ushort), )
dll.BVTMagImage_GetRow.restype = c_int
dll.BVTMagImage_GetRow.argtypes = (c_void_p, c_int, POINTER(c_ushort), )
dll.BVTMagImage_GetBits.restype = c_int
dll.BVTMagImage_GetBits.argtypes = (c_void_p, POINTER(c_ushort), )
dll.BVTMagImage_CopyBits.restype = c_int
dll.BVTMagImage_CopyBits.argtypes = (c_void_p, POINTER(c_ushort), c_int, )
dll.BVTMagImage_SavePGM.restype = c_int
dll.BVTMagImage_SavePGM.argtypes = (c_void_p, c_char_p, )
dll.BVTMagImage_GetHeight.restype = c_int
dll.BVTMagImage_GetHeight.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTMagImage_GetWidth.restype = c_int
dll.BVTMagImage_GetWidth.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTMagImage_GetMaxRangeOfPixel.restype = c_int
dll.BVTMagImage_GetMaxRangeOfPixel.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTMagImage_GetImageType.restype = c_int
dll.BVTMagImage_GetImageType.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTMagImage_GetRangeResolution.restype = c_int
dll.BVTMagImage_GetRangeResolution.argtypes = (c_void_p, POINTER(c_double), )
dll.BVTMagImage_GetBearingResolution.restype = c_int
dll.BVTMagImage_GetBearingResolution.argtypes = (c_void_p, POINTER(c_double), )
dll.BVTMagImage_GetOriginRow.restype = c_int
dll.BVTMagImage_GetOriginRow.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTMagImage_GetOriginCol.restype = c_int
dll.BVTMagImage_GetOriginCol.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTMagImage_GetPixelRange.restype = c_int
dll.BVTMagImage_GetPixelRange.argtypes = (c_void_p, c_int, c_int, POINTER(c_double), )
dll.BVTMagImage_GetPixelRelativeBearing.restype = c_int
dll.BVTMagImage_GetPixelRelativeBearing.argtypes = (c_void_p, c_int, c_int, POINTER(c_double), )
dll.BVTMagImage_GetPixelCoordinateAtRangeBearing.restype = c_int
dll.BVTMagImage_GetPixelCoordinateAtRangeBearing.argtypes = (c_void_p, c_float, c_float, POINTER(c_int), POINTER(c_int), )
dll.BVTMagImage_GetPixelCoordinateAtXY.restype = c_int
dll.BVTMagImage_GetPixelCoordinateAtXY.argtypes = (c_void_p, c_float, c_float, POINTER(c_int), POINTER(c_int), )
dll.BVTMagImage_GetFOVMinAngle.restype = c_int
dll.BVTMagImage_GetFOVMinAngle.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTMagImage_GetFOVMaxAngle.restype = c_int
dll.BVTMagImage_GetFOVMaxAngle.argtypes = (c_void_p, POINTER(c_float), )


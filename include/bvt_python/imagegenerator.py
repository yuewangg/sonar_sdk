from bvt_python.magimage import *
from bvt_python.rangeprofile import *
from bvt_python.error import *

"""
This file was generated by bvtidl.pl.
Your changes will most likely be lost.
"""

from ctypes import *
import sys
import sdkerror


class ImageGenerator(object):
    """
    An ImageGenerator processes Ping data to create images.  
    Thread-safety: none.
    """
    def __init__(self, handle=None):
        super(ImageGenerator, self).__setattr__("_initialized", False)
        self._deleted = False
        if handle is None:
            self._handle = dll.BVTImageGenerator_Create()
        else:
            self._handle = handle
        super(ImageGenerator, self).__setattr__("_initialized", True)

    def __del__(self):
        self._deleted = True
        dll.BVTImageGenerator_Destroy(self._handle)

    def __setattr__(self, name, value):
        """ Don't allow setting non-existent attributes on this class
        """
        if self._initialized and not hasattr(self, name):
            raise AttributeError("%s instance has no attribute '%s'" % (self.__class__.__name__, name))
        super(ImageGenerator, self).__setattr__(name, value)

    def set_head(self, head):
        """
        Set the Head and perform expensive initialization.
        @see IsValidForHead
        """
        error_code = dll.BVTImageGenerator_SetHead(self._handle, head._handle)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def is_valid_for_head(self, head):
        """
        Return true if the specified Head is associated with this instance. If false, you must
        call SetHead.
        @see SetHead
        """
        is_valid = c_int()
        error_code = dll.BVTImageGenerator_IsValidForHead(self._handle, head._handle, byref(is_valid))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return is_valid.value > 0

    @property
    def image_resolution_policy(self):
        """
        Return the algorithm used to calculate image resolution.
        """
        resolutionPolicy = c_int()
        error_code = dll.BVTImageGenerator_GetImageResolutionPolicy(self._handle, byref(resolutionPolicy))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return resolutionPolicy.value

    @image_resolution_policy.setter
    def image_resolution_policy(self, resolutionPolicy):
        """
        Set the image processing resolution. The RES_AUTO setting is highly
        recommended, as it adapts via a formula according to the stop range,
        whereas the other ranges are fixed values, and should only be used
        in specialized cases, such as requesting high resolution for longer
        distances (which will increase the processing time required to 
        create the image). R-Theta images may use either this function or
        SetRangeResolution(), depending on the degree of control required.
        """
        error_code = dll.BVTImageGenerator_SetImageResolutionPolicy(self._handle, ( c_int(resolutionPolicy) ))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def image_filter_flags(self):
        """
        Return the filter flags.  As of this version, if more than one flag is set, only the lowest-valued flag is used.
        """
        flags = c_int()
        error_code = dll.BVTImageGenerator_GetImageFilterFlags(self._handle, byref(flags))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return flags.value

    @image_filter_flags.setter
    def image_filter_flags(self, flags):
        """
        Set the filter flags. As of this version, if more than one flag is set, only the lowest-valued flag is used.
        """
        error_code = dll.BVTImageGenerator_SetImageFilterFlags(self._handle, ( c_int(flags) ))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def range_resolution(self):
        """
        @see SetRangeResolution
        """
        resolution_in_meters = c_float()
        error_code = dll.BVTImageGenerator_GetRangeResolution(self._handle, byref(resolution_in_meters))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return resolution_in_meters.value

    @range_resolution.setter
    def range_resolution(self, resolution_in_meters):
        """
        Requests a range resolution for R-Theta images. Also affects the
        range resolution for RangeProfile. Note that the exact range resolution
        may not be available, and the closest resolution will be set. The
        actual resolution can be obtained by querying the returned image
        or RangeProfile object.
        """
        error_code = dll.BVTImageGenerator_SetRangeResolution(self._handle, resolution_in_meters)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def range_profile_intensity_threshold(self):
        """
        @see BVTHead_SetRangeProfileThreshold
        """
        threshold = c_ushort()
        error_code = dll.BVTImageGenerator_GetRangeProfileIntensityThreshold(self._handle, byref(threshold))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return threshold.value

    @range_profile_intensity_threshold.setter
    def range_profile_intensity_threshold(self, threshold):
        """
        @see BVTHead_SetRangeProfileThreshold
        """
        error_code = dll.BVTImageGenerator_SetRangeProfileIntensityThreshold(self._handle, threshold)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def range_profile_start_range(self):
        """
        @see BVTHead_SetTargetStartRange
        """
        start_range = c_float()
        error_code = dll.BVTImageGenerator_GetRangeProfileStartRange(self._handle, byref(start_range))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return start_range.value

    @range_profile_start_range.setter
    def range_profile_start_range(self, start_range):
        """
        @see BVTHead_SetTargetStartRange
        """
        error_code = dll.BVTImageGenerator_SetRangeProfileStartRange(self._handle, start_range)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def set_xy_image_size(self, width, height):
        """
        Set the preferred XY image size. Note that the aspect ratio of the image
        remains fixed (as a function of start and stop range). If you specify non-zero 
        parameters to this method that violate the aspect ratio, the image width will be 
        adjusted.
        This is a helper function to accompany the GetImageXY() function.
        """
        error_code = dll.BVTImageGenerator_SetXYImageSize(self._handle, width, height)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def r_theta_image_width(self):
        """
        Get the RTheta image width
        This is a helper function to accompany the GetImageRTheta() function.
        """
        width = c_int()
        error_code = dll.BVTImageGenerator_GetRThetaImageWidth(self._handle, byref(width))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return width.value

    @r_theta_image_width.setter
    def r_theta_image_width(self, width):
        """
        Set the RTheta image width
        This is a helper function to accompany the GetImageRTheta() function.
        """
        error_code = dll.BVTImageGenerator_SetRThetaImageWidth(self._handle, width)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def get_image_xy(self, ping):
        """
        Retrieve an XY-format image of this ping, according to the parameters set
        in the head used to get this ping. Use BVTHead_SetImageSizeXY() to set the size for this image.
        See Head and MagImage documentation for more details.
        """
        img_ptr = c_void_p()
        error_code = dll.BVTImageGenerator_GetImageXY(self._handle, ping._handle, byref(img_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        img = MagImage(img_ptr)
        return img

    def get_image_r_theta(self, ping):
        """
        Retrieve an R-Theta format image of this ping, according to the parameters set
        in the head used to get this ping. Use BVTHead_SetImageWidthRTheta() to set the size for this image.
        See Head and MagImage documentation for more details.
        """
        img_ptr = c_void_p()
        error_code = dll.BVTImageGenerator_GetImageRTheta(self._handle, ping._handle, byref(img_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        img = MagImage(img_ptr)
        return img

    def get_range_profile(self, ping):
        """
        Creates and returns RangeProfile for the ping.
        @warning This function will fail on a sonar with old firmware, or a file recorded from a sonar with old firmware.
        """
        ranges_ptr = c_void_p()
        error_code = dll.BVTImageGenerator_GetRangeProfile(self._handle, ping._handle, byref(ranges_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        ranges = RangeProfile(ranges_ptr)
        return ranges

    def get_stored_range_profile(self, ping):
        """
        Returns the RangeProfile for a ping with RangeProfile created on the sonar, not the client.
        @note Returns an error if this ping does not have a stored RangeProfile.
        """
        ranges_ptr = c_void_p()
        error_code = dll.BVTImageGenerator_GetStoredRangeProfile(self._handle, ping._handle, byref(ranges_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        ranges = RangeProfile(ranges_ptr)
        return ranges

    @property
    def clipping_threshold(self):
        """
        Returns the floating point value of the clipping threshold. 
        This threshold represents a percentage of dynamic range above which data is considered 
        clipped and subsequently nulled. 
        """
        threshold = c_float()
        error_code = dll.BVTImageGenerator_GetClippingThreshold(self._handle, byref(threshold))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return threshold.value

    @clipping_threshold.setter
    def clipping_threshold(self, threshold):
        """
        The clipping threshold specifies the percentage of dynamic range above which data will be nulled. 
        The value must be set between 0.0 and 1.0. A value of 0.0 indicates 
        that all data should be nulled (everything clips), while a value of 1.0 effectively 
        disables any high-side thresholding. Clipped data is not processed, saving CPU cycles, 
        so the clipping threshold may serve as a performance tuning parameter.
        """
        error_code = dll.BVTImageGenerator_SetClippingThreshold(self._handle, threshold)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def noise_threshold(self):
        """
        Returns the floating point value of the noise threshold. This threshold 
        represents a percentage of dynamic range below which data is considered 
        to be noise and subsequently nulled.
        """
        threshold = c_float()
        error_code = dll.BVTImageGenerator_GetNoiseThreshold(self._handle, byref(threshold))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return threshold.value

    @noise_threshold.setter
    def noise_threshold(self, threshold):
        """
        The noise threshold specifies the percentage of dynamic range below which data will be nulled. 
        The value must be set between 0.0 and 1.0. A value of 0.0 indicates that no data should be nulled, 
        effectively disabling low-side thresholding, while a value of 1.0 will force all data to be nulled. 
        Data that is not above the noise threshold is not processed, saving CPU cycles, so the noise 
        threshold may serve as a performance tuning parameter.
        """
        error_code = dll.BVTImageGenerator_SetNoiseThreshold(self._handle, threshold)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    SOUND_SPEED_OVERRIDE_OFF = 0
    @property
    def sound_speed_override(self):
        """
        
        """
        meters_per_second = c_int()
        error_code = dll.BVTImageGenerator_GetSoundSpeedOverride(self._handle, byref(meters_per_second))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return meters_per_second.value

    @sound_speed_override.setter
    def sound_speed_override(self, meters_per_second):
        """
        When the GetImage functions are called, ignore the sound speed stored in the ping and 
        use this value instead.  
        Use the default SOUND_SPEED_OVERRIDE_OFF to use the ping's stored sound speed.  
        """
        error_code = dll.BVTImageGenerator_SetSoundSpeedOverride(self._handle, meters_per_second)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def map_algorithm(self):
        """
        Do not use this. Experimental.
        """
        algorithm = c_int()
        error_code = dll.BVTImageGenerator_GetMapAlgorithm(self._handle, byref(algorithm))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return algorithm.value

    @map_algorithm.setter
    def map_algorithm(self, algorithm):
        """
        Do not use this. Experimental.
        """
        error_code = dll.BVTImageGenerator_SetMapAlgorithm(self._handle, algorithm)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def create_stored_range_profile_and_replace_signal(self, ping):
        """
        @warning This function will fail on a sonar with old firmware, or a file recorded from a sonar with old firmware.
        """
        error_code = dll.BVTImageGenerator_CreateStoredRangeProfileAndReplaceSignal(self._handle, ping._handle)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def get_sector_overlap_blending_params(self, nearRangeBeamToFavor, farRangeBeamToFavor, rangeSkewExponent, beamWeightExponent):
        """
        Retrieve the current overlap blending parameters.
        """
        error_code = dll.BVTImageGenerator_GetSectorOverlapBlendingParams(self._handle, byref(nearRangeBeamToFavor), byref(farRangeBeamToFavor), byref(rangeSkewExponent), byref(beamWeightExponent))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def set_sector_overlap_blending_params(self, nearRangeBeamToFavor, farRangeBeamToFavor, rangeSkewExponent, beamWeightExponent):
        """
        Set the overlap blending parameters. 
        """
        error_code = dll.BVTImageGenerator_SetSectorOverlapBlendingParams(self._handle, nearRangeBeamToFavor, farRangeBeamToFavor, rangeSkewExponent, beamWeightExponent)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)


    def get_handle(self):
        """
        SDK object pointer
        """
        return self._handle
if "win32" in sys.platform:
    dll_name = "bvtsdk4.dll"
elif "darwin" in sys.platform:
    dll_name = "libbvtsdk.dylib"
else:
    dll_name = "libbvtsdk.so"
dll = CDLL(dll_name)
dll.BVTImageGenerator_Create.restype = c_void_p
dll.BVTImageGenerator_Destroy.restype = None
dll.BVTImageGenerator_Destroy.argtypes = (c_void_p,)
dll.BVTImageGenerator_SetHead.restype = c_int
dll.BVTImageGenerator_SetHead.argtypes = (c_void_p, c_void_p, )
dll.BVTImageGenerator_IsValidForHead.restype = c_int
dll.BVTImageGenerator_IsValidForHead.argtypes = (c_void_p, c_void_p, POINTER(c_int), )
dll.BVTImageGenerator_GetImageResolutionPolicy.restype = c_int
dll.BVTImageGenerator_GetImageResolutionPolicy.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTImageGenerator_SetImageResolutionPolicy.restype = c_int
dll.BVTImageGenerator_SetImageResolutionPolicy.argtypes = (c_void_p, c_int, )
dll.BVTImageGenerator_GetImageFilterFlags.restype = c_int
dll.BVTImageGenerator_GetImageFilterFlags.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTImageGenerator_SetImageFilterFlags.restype = c_int
dll.BVTImageGenerator_SetImageFilterFlags.argtypes = (c_void_p, c_int, )
dll.BVTImageGenerator_GetRangeResolution.restype = c_int
dll.BVTImageGenerator_GetRangeResolution.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTImageGenerator_SetRangeResolution.restype = c_int
dll.BVTImageGenerator_SetRangeResolution.argtypes = (c_void_p, c_float, )
dll.BVTImageGenerator_GetRangeProfileIntensityThreshold.restype = c_int
dll.BVTImageGenerator_GetRangeProfileIntensityThreshold.argtypes = (c_void_p, POINTER(c_ushort), )
dll.BVTImageGenerator_SetRangeProfileIntensityThreshold.restype = c_int
dll.BVTImageGenerator_SetRangeProfileIntensityThreshold.argtypes = (c_void_p, c_ushort, )
dll.BVTImageGenerator_GetRangeProfileStartRange.restype = c_int
dll.BVTImageGenerator_GetRangeProfileStartRange.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTImageGenerator_SetRangeProfileStartRange.restype = c_int
dll.BVTImageGenerator_SetRangeProfileStartRange.argtypes = (c_void_p, c_float, )
dll.BVTImageGenerator_SetXYImageSize.restype = c_int
dll.BVTImageGenerator_SetXYImageSize.argtypes = (c_void_p, c_int, c_int, )
dll.BVTImageGenerator_GetRThetaImageWidth.restype = c_int
dll.BVTImageGenerator_GetRThetaImageWidth.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTImageGenerator_SetRThetaImageWidth.restype = c_int
dll.BVTImageGenerator_SetRThetaImageWidth.argtypes = (c_void_p, c_int, )
dll.BVTImageGenerator_GetImageXY.restype = c_int
dll.BVTImageGenerator_GetImageXY.argtypes = (c_void_p, c_void_p, POINTER(c_void_p), )
dll.BVTImageGenerator_GetImageRTheta.restype = c_int
dll.BVTImageGenerator_GetImageRTheta.argtypes = (c_void_p, c_void_p, POINTER(c_void_p), )
dll.BVTImageGenerator_GetRangeProfile.restype = c_int
dll.BVTImageGenerator_GetRangeProfile.argtypes = (c_void_p, c_void_p, POINTER(c_void_p), )
dll.BVTImageGenerator_GetStoredRangeProfile.restype = c_int
dll.BVTImageGenerator_GetStoredRangeProfile.argtypes = (c_void_p, c_void_p, POINTER(c_void_p), )
dll.BVTImageGenerator_GetClippingThreshold.restype = c_int
dll.BVTImageGenerator_GetClippingThreshold.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTImageGenerator_SetClippingThreshold.restype = c_int
dll.BVTImageGenerator_SetClippingThreshold.argtypes = (c_void_p, c_float, )
dll.BVTImageGenerator_GetNoiseThreshold.restype = c_int
dll.BVTImageGenerator_GetNoiseThreshold.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTImageGenerator_SetNoiseThreshold.restype = c_int
dll.BVTImageGenerator_SetNoiseThreshold.argtypes = (c_void_p, c_float, )
dll.BVTImageGenerator_GetSoundSpeedOverride.restype = c_int
dll.BVTImageGenerator_GetSoundSpeedOverride.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTImageGenerator_SetSoundSpeedOverride.restype = c_int
dll.BVTImageGenerator_SetSoundSpeedOverride.argtypes = (c_void_p, c_int, )
dll.BVTImageGenerator_GetMapAlgorithm.restype = c_int
dll.BVTImageGenerator_GetMapAlgorithm.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTImageGenerator_SetMapAlgorithm.restype = c_int
dll.BVTImageGenerator_SetMapAlgorithm.argtypes = (c_void_p, c_int, )
dll.BVTImageGenerator_CreateStoredRangeProfileAndReplaceSignal.restype = c_int
dll.BVTImageGenerator_CreateStoredRangeProfileAndReplaceSignal.argtypes = (c_void_p, c_void_p, )
dll.BVTImageGenerator_GetSectorOverlapBlendingParams.restype = c_int
dll.BVTImageGenerator_GetSectorOverlapBlendingParams.argtypes = (c_void_p, POINTER(c_uint), POINTER(c_uint), POINTER(c_float), POINTER(c_float), )
dll.BVTImageGenerator_SetSectorOverlapBlendingParams.restype = c_int
dll.BVTImageGenerator_SetSectorOverlapBlendingParams.argtypes = (c_void_p, c_int, c_int, c_float, c_float, )


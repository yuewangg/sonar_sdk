from bvt_python.networksettings import *
from bvt_python.eventmark import *
from bvt_python.orientation import *
from bvt_python.head import *
from bvt_python.ping import *
from bvt_python.navdata import *
from bvt_python.error import *

"""
This file was generated by bvtidl.pl.
Your changes will most likely be lost.
"""

from ctypes import *
import sys
import sdkerror


class Sonar(object):
    """
    The Sonar object is the top level object in the SDK.  A sonar 
    object embodies communication with a single physical sonar unit,
    or file.  Each sonar contains several heads, which is where most
    of the functionality is implemented.  Sonar also provides a
    function to create new data files using BlueView's .son format.
    """
    def __init__(self, handle=None):
        super(Sonar, self).__setattr__("_initialized", False)
        self._deleted = False
        if handle is None:
            self._handle = dll.BVTSonar_Create()
        else:
            self._handle = handle
        super(Sonar, self).__setattr__("_initialized", True)

    def __del__(self):
        self._deleted = True
        dll.BVTSonar_Destroy(self._handle)

    def __setattr__(self, name, value):
        """ Don't allow setting non-existent attributes on this class
        """
        if self._initialized and not hasattr(self, name):
            raise AttributeError("%s instance has no attribute '%s'" % (self.__class__.__name__, name))
        super(Sonar, self).__setattr__(name, value)

    def open(self, type, type_params):
        """
        Open the sonar type 'type' using the specified parameters.
        Allowed types (and parameters):
        - FILE <br>
        [filename] - Required <br>
        - NET <br>
        [host] - Connect to the specified host.<br>
        - CFILE <br>
        [files] - semicolon delimited list of files to play as composite sonar<br>
        - COMP <br>
        [hosts] - semicolon delimited list of files hosts to connect to.
        of each host all heads will be used.<br>
        """
        error_code = dll.BVTSonar_Open(self._handle, (type), (type_params))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def create_file(self, file_name, src, create_params):
        """
        Create a new data file.
        Files are always created by 'cloning' another Sonar
        object.  This ensures that the file receives all the
        needed configuration data needed to process 
        images.
        """
        error_code = dll.BVTSonar_CreateFile(self._handle, (file_name), src._handle, (create_params))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def serial_number(self):
        """
        Return the serial 'number' of the sonar. The string may contain non-numeric characters.
        """
        buffer_size = 255
        buffer = create_string_buffer(buffer_size)
        error_code = dll.BVTSonar_GetSerialNumber(self._handle, buffer, buffer_size)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (buffer.value)

    @property
    def firmware_revision(self):
        """
        Return the firmware revision of the sonar. The string may contain non-numeric characters.
        """
        buffer_size = 255
        buffer = create_string_buffer(buffer_size)
        error_code = dll.BVTSonar_GetFirmwareRevision(self._handle, buffer, buffer_size)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (buffer.value)

    @property
    def is_file(self):
        """
        Returns True if this sonar is associated with a file.
        """
        is_file = c_int()
        error_code = dll.BVTSonar_IsFile(self._handle, byref(is_file))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return is_file.value > 0

    @property
    def file_has_raw_ping_data(self):
        """
        Returns True if this sonar file has raw ping data.
        """
        file_has_raw_ping_data = c_int()
        error_code = dll.BVTSonar_FileHasRawPingData(self._handle, byref(file_has_raw_ping_data))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return file_has_raw_ping_data.value > 0

    @property
    def is_connected(self):
        """
        Returns True if this sonar is networked and connected.
        """
        is_connected = c_int()
        error_code = dll.BVTSonar_IsConnected(self._handle, byref(is_connected))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return is_connected.value > 0

    @property
    def supports_multicast(self):
        """
        Returns True if this sonar is networked and supports multicast pings.
        """
        is_multicast = c_int()
        error_code = dll.BVTSonar_SupportsMulticast(self._handle, byref(is_multicast))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return is_multicast.value > 0

    def revert_factory_settings(self):
        """
        Removes all user settings stored on the sonar and reverts the unit back to
        its original factory configuration.  IP address of the unit after calling 
        this function will be 192.168.1.45, while other parameters depend on the type of
        sonar.
        """
        error_code = dll.BVTSonar_RevertFactorySettings(self._handle)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def file_size(self):
        """
        Gets the size of a file created with CreateFile(). Only works with
        file type sonars. A networked sonar will return 0, as will a file
        type sonar if there is no open file associated with it.
        The return value must be multiplied by 1000 to get the actual
        file size in bytes.
        """
        fileSize = c_int()
        error_code = dll.BVTSonar_GetFileSize(self._handle, byref(fileSize))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return fileSize.value

    @property
    def time_indexed_ping_count(self):
        """
        Return the number of time indexed pings in this file.
        """
        count = c_int()
        error_code = dll.BVTSonar_GetTimeIndexedPingCount(self._handle, byref(count))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return count.value

    def get_time_indexed_ping(self, ping_num):
        """
        Retrieve a ping from the file, using the time index.
        The Ping will have the same Head parent that it was acquired with.
        If this function is called on a "live" sonar (network),
        then it always returns the FAILED (1) error.
        """
        ping_ptr = c_void_p()
        error_code = dll.BVTSonar_GetTimeIndexedPing(self._handle, ping_num, byref(ping_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        ping = Ping(ping_ptr)
        return ping

    class _time_indexed_pingsIterator:
        def __init__(self, sdk_object, func, low, high):
            self.sdk_object = sdk_object
            self.func = func
            self.current = low
            self.high = high

        def __iter__(self):
            return self

        def __len__(self):
            return self.sdk_object.time_indexed_ping_count

        def next(self): # Python 3: def __next__(self)
            if self.current > self.high:
                raise StopIteration
            else:
                self.current += 1
                return self.func(self.sdk_object, self.current - 1)

    def time_indexed_pings(self): # NB: ClassName.func_name Doesn't allow dependency injection
        """
        Returns an iterator calling get_time_indexed_ping() from 0 to time_indexed_ping_count - 1
        """
        iter = Sonar._time_indexed_pingsIterator(self, Sonar.get_time_indexed_ping, 0, self.time_indexed_ping_count - 1)
        return iter

    def get_head(self, head_num):
        """
        Retrieve a Head object from the sonar
        """
        head_ptr = c_void_p()
        error_code = dll.BVTSonar_GetHead(self._handle, head_num, byref(head_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        head = Head(self, head_ptr)
        return head

    @property
    def head_count(self):
        """
        Return the number of heads on this sonar.
        """
        head_count = c_int()
        error_code = dll.BVTSonar_GetHeadCount(self._handle, byref(head_count))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return head_count.value

    @property
    def sonar_model_name(self):
        """
        Retrieves a copy of a short string with the model of the sonar.
        At the time of this writing, 20 characters would easily hold all of
        the sonar model names.
        """
        buffer_size = 255
        buffer = create_string_buffer(buffer_size)
        error_code = dll.BVTSonar_GetSonarModelName(self._handle, buffer, buffer_size)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (buffer.value)

    @property
    def sonar_name(self):
        """
        Retrieves a copy of the user-overridable name of the sonar. <br> 
        The name is set at the factory but is separate from any BlueView model designations. <br>
        """
        buffer_size = 255
        buffer = create_string_buffer(buffer_size)
        error_code = dll.BVTSonar_GetSonarName(self._handle, buffer, buffer_size)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (buffer.value)

    @sonar_name.setter
    def sonar_name(self, name):
        """
        
        """
        error_code = dll.BVTSonar_SetSonarName(self._handle, (name))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def get_temperature(self):
        """
        Return the sonar's internal temperature in degrees Celsius
        """
        temperature = c_float()
        error_code = dll.BVTSonar_GetTemperature(self._handle, byref(temperature))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return temperature.value

    def try_get_temperature(self, default_value):
        """
        Return the sonar's internal temperature in degrees Celsius
        """
        temperature = c_float()
        error_code = dll.BVTSonar_GetTemperature(self._handle, byref(temperature))
        if (0 != error_code):
            return default_value
        return temperature.value

    def put_nav_data(self, nav_data):
        """
        Write the object to a file.  Note that this object is not associated with a Ping.
        """
        error_code = dll.BVTSonar_PutNavData(self._handle, nav_data._handle)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def nav_data_count(self):
        """
        Returns the number of NavData objects in this file.  This count does not include any NavData objects that were written to the file as part of a Ping.
        """
        count = c_int()
        error_code = dll.BVTSonar_GetNavDataCount(self._handle, byref(count))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return count.value

    def get_nav_data_copy(self, index):
        """
        Retrieve a NavData object from the file.
        The index is zero-based, that is, if GetNavDataCount() returned a value of 3, then valid indices are 0, 1, and 2.
        """
        nav_data_ptr = c_void_p()
        error_code = dll.BVTSonar_GetNavDataCopy(self._handle, index, byref(nav_data_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        nav_data = NavData(nav_data_ptr)
        return nav_data

    class _nav_data_copiesIterator:
        def __init__(self, sdk_object, func, low, high):
            self.sdk_object = sdk_object
            self.func = func
            self.current = low
            self.high = high

        def __iter__(self):
            return self

        def __len__(self):
            return self.sdk_object.nav_data_count

        def next(self): # Python 3: def __next__(self)
            if self.current > self.high:
                raise StopIteration
            else:
                self.current += 1
                return self.func(self.sdk_object, self.current - 1)

    def nav_data_copies(self): # NB: ClassName.func_name Doesn't allow dependency injection
        """
        Returns an iterator calling get_nav_data_copy() from 0 to nav_data_count - 1
        """
        iter = Sonar._nav_data_copiesIterator(self, Sonar.get_nav_data_copy, 0, self.nav_data_count - 1)
        return iter

    def put_orientation(self, orient):
        """
        Write the object to a file.  Note that this object is not associated with a Ping.
        """
        error_code = dll.BVTSonar_PutOrientation(self._handle, orient._handle)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def orientation_count(self):
        """
        Returns the number of Orientation objects in this file.  This count does not include any Orientation objects that were written to the file as part of a Ping or a Head.
        """
        count = c_int()
        error_code = dll.BVTSonar_GetOrientationCount(self._handle, byref(count))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return count.value

    def get_orientation_copy(self, index):
        """
        Retrieve a Orientation object from the file.
        The index is zero-based, that is, if GetlOrientationCount() returned a value of 3, then valid indices are 0, 1, and 2.
        """
        orient_ptr = c_void_p()
        error_code = dll.BVTSonar_GetOrientationCopy(self._handle, index, byref(orient_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        orient = Orientation(orient_ptr)
        return orient

    def put_event_mark(self, key, text):
        """
        Creates and writes an EventMark to the current file.
        The key string contains arbitrary user-defined text. The maximum length is ::BVTEVENTMARK_MAX_KEYLENGTH characters.
        The text string contains arbitrary user-defined text. The maximum length is ::BVTEVENTMARK_MAX_TEXTLENGTH characters.
        These strings provide a means to store raw data strings from various sensors such as a GPS or compass.
        The Key string would be used to identify the device, e.g. "GPS", and the data string ("sentence") from 
        the device would be stored in the Text string.
        Note that the EventMark is not associated with a Ping.
        """
        error_code = dll.BVTSonar_PutEventMark(self._handle, (key), (text))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def event_mark_count(self):
        """
        Returns the number of EventMark objects in this file.  
        """
        count = c_int()
        error_code = dll.BVTSonar_GetEventMarkCount(self._handle, byref(count))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return count.value

    def get_event_mark_copy(self, index):
        """
        Retrieve an EventMark object from the file.
        The index is zero-based, that is, if GetEventMarkCount returned a value of 3, then valid indices are 0, 1, and 2.
        """
        em_ptr = c_void_p()
        error_code = dll.BVTSonar_GetEventMarkCopy(self._handle, index, byref(em_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        em = EventMark(em_ptr)
        return em

    class _event_mark_copiesIterator:
        def __init__(self, sdk_object, func, low, high):
            self.sdk_object = sdk_object
            self.func = func
            self.current = low
            self.high = high

        def __iter__(self):
            return self

        def __len__(self):
            return self.sdk_object.event_mark_count

        def next(self): # Python 3: def __next__(self)
            if self.current > self.high:
                raise StopIteration
            else:
                self.current += 1
                return self.func(self.sdk_object, self.current - 1)

    def event_mark_copies(self): # NB: ClassName.func_name Doesn't allow dependency injection
        """
        Returns an iterator calling get_event_mark_copy() from 0 to event_mark_count - 1
        """
        iter = Sonar._event_mark_copiesIterator(self, Sonar.get_event_mark_copy, 0, self.event_mark_count - 1)
        return iter

    @property
    def network_settings(self):
        """
        Get the network settings of this Sonar.
        The settings may not be valid until this Sonar is restarted.
        """
        settings_ptr = c_void_p()
        error_code = dll.BVTSonar_GetNetworkSettings(self._handle, byref(settings_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        settings = NetworkSettings(settings_ptr)
        return settings

    @network_settings.setter
    def network_settings(self, settings):
        """
        Set the network settings of this sonar. 
        These settings will not be valid unti this Sonar is restarted.
        """
        error_code = dll.BVTSonar_SetNetworkSettings(self._handle, settings._handle)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def timestamps_use_local_clock(self):
        """
        Returns true if ping timestamps are modified by the local computer's (running the SDK) clock.
        """
        is_enabled = c_int()
        error_code = dll.BVTSonar_GetTimestampsUseLocalClock(self._handle, byref(is_enabled))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return is_enabled.value > 0

    @timestamps_use_local_clock.setter
    def timestamps_use_local_clock(self, enable):
        """
        Set to true to modify ping timestamps by the local computer's (running the SDK) clock.
        \attention Disable if this Sonar is connected to a pulse-per-second (PPS) signal.
        """
        error_code = dll.BVTSonar_SetTimestampsUseLocalClock(self._handle, ( 1 if enable else 0))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def dump_to_file(self, file):
        """
        Generates a new file containing the current configuration of the sonar. 
        The output should be sent to BlueView for analysis and is intended for diagnostic purposes.
        """
        error_code = dll.BVTSonar_DumpToFile(self._handle, (file))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def supports_target_tracking(self):
        """
        Indicates whether this sonar supports target tracking.
        """
        supported = c_int()
        error_code = dll.BVTSonar_SupportsTargetTracking(self._handle, byref(supported))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return supported.value > 0

    @property
    def supports_source_level_control(self):
        """
        Latest generation BlueView sonar support source level (transmit power) control. This calls allows users to ascertain whether the sonar supports the source level control functionality.
        """
        supported = c_int()
        error_code = dll.BVTSonar_SupportsSourceLevelControl(self._handle, byref(supported))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return supported.value > 0

    @property
    def source_level(self):
        """
        Get the sonar's source level (transmit power), only found on newer hardware.
        """
        level = c_float()
        error_code = dll.BVTSonar_GetSourceLevel(self._handle, byref(level))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return level.value

    @source_level.setter
    def source_level(self, level):
        """
        Set the sonar's transmit source level, only found on newer hardware. This will always disable the auto source level mode.
        """
        error_code = dll.BVTSonar_SetSourceLevel(self._handle, level)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def enable_auto_source_level(self, enable):
        """
        Sonar that support source level control can be configured to automatically adjust the source level based on the current configured max range. This call allows users to enable/disable this feature. 
        """
        error_code = dll.BVTSonar_EnableAutoSourceLevel(self._handle, ( 1 if enable else 0))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def is_auto_source_level_enabled(self):
        """
        Indicates whether sonar is configured to use automatic source level control.
        """
        enabled = c_int()
        error_code = dll.BVTSonar_IsAutoSourceLevelEnabled(self._handle, byref(enabled))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return enabled.value > 0

    @property
    def supports_external_hardware_trigger(self):
        """
        Return true if this sonar's hardware and firmware combination supports a hardware trigger.
        \warning This function will return true even if a hardware trigger is NOT physically connected to the sonar but the firmware does support triggering.
        \warning This function will return false even if you physically connect a hardware trigger but the firmware
        does not support triggering.
        """
        supported = c_int()
        error_code = dll.BVTSonar_SupportsExternalHardwareTrigger(self._handle, byref(supported))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return supported.value > 0

    def enable_external_hardware_trigger(self, delay):
        """
        Enables the sonar to ping on receipt of an external trigger signal. Note that 
        this requires a sonar equipped with a hardware trigger.
        \warning Enabling this option on an unsupported sonar will cause it to stop
        pinging until the option is turned off.
        \warning Enabling external triggering will override any previous setting to
        enable hardware trigger output. (These are mutually exclusive settings)
        """
        error_code = dll.BVTSonar_EnableExternalHardwareTrigger(self._handle, delay)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def disable_external_hardware_trigger(self):
        """
        Turns hardware triggering off. 
        """
        error_code = dll.BVTSonar_DisableExternalHardwareTrigger(self._handle)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def enable_external_hardware_trigger_output(self, triggerEvent):
        """
        Enables the sonar to generate a 1 millisecond pulse on the hardware
        trigger line whenever the trigger event occurs. This provides a
        synchronization capability via hardware for multi-sensor systems. The trigger event
        may be specified as the beginning of acoustic transmit, the end of acoustic transmit,
        or the end of data acquisition.
        \warning Enabling hardware trigger output will override any previous 
        setting to enable external hardware trigger. (These are mutually exclusive settings)
        """
        error_code = dll.BVTSonar_EnableExternalHardwareTriggerOutput(self._handle, ( c_int(triggerEvent) ))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def external_hardware_trigger_enabled(self):
        """
        Queries whether hardware trigger is enabled. It is only valid for sonars equipped
        with a hardware trigger.
        """
        enabled = c_int()
        error_code = dll.BVTSonar_GetExternalHardwareTriggerEnabled(self._handle, byref(enabled))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return enabled.value > 0

    @property
    def external_hardware_trigger_direction(self):
        """
        Queries the direction (input or output) of the hardware trigger. A hardware trigger
        configured as input indicates that the sonar pings only on receipt of a trigger pulse.
        A hardware trigger configured as output indicates that the sonar will emit a trigger
        pulse during each ping. See TriggerOutputEvent for the list of events in a ping 
        sequence that can be configured as the pulse trigger event. This function is only
        """
        is_input = c_int()
        error_code = dll.BVTSonar_GetExternalHardwareTriggerDirection(self._handle, byref(is_input))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return is_input.value > 0

    @property
    def external_hardware_trigger_input_delay(self):
        """
        Only valid if the hardware trigger is configured as an input. See EnableExternalHardwareTrigger
        """
        delay_in_ms = c_int()
        error_code = dll.BVTSonar_GetExternalHardwareTriggerInputDelay(self._handle, byref(delay_in_ms))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return delay_in_ms.value

    @property
    def external_hardware_trigger_output_event(self):
        """
        Only valid if the hardware trigger is configure as an output. 
        See EnableExternalHardwareTriggerOutput
        """
        triggerEvent = c_int()
        error_code = dll.BVTSonar_GetExternalHardwareTriggerOutputEvent(self._handle, byref(triggerEvent))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return triggerEvent.value

    TRIGGEROUTPUTEVENT_STARTOFTRANSMIT = 0
    TRIGGEROUTPUTEVENT_ENDOFTRANSMIT = 1
    TRIGGEROUTPUTEVENT_ENDOFACQUISITION = 2

    def get_handle(self):
        """
        SDK object pointer
        """
        return self._handle
if "win32" in sys.platform:
    dll_name = "bvtsdk4.dll"
elif "darwin" in sys.platform:
    dll_name = "libbvtsdk.dylib"
else:
    dll_name = "libbvtsdk.so"
dll = CDLL(dll_name)
dll.BVTSonar_Create.restype = c_void_p
dll.BVTSonar_Destroy.restype = None
dll.BVTSonar_Destroy.argtypes = (c_void_p,)
dll.BVTSonar_Open.restype = c_int
dll.BVTSonar_Open.argtypes = (c_void_p, c_char_p, c_char_p, )
dll.BVTSonar_CreateFile.restype = c_int
dll.BVTSonar_CreateFile.argtypes = (c_void_p, c_char_p, c_void_p, c_char_p, )
dll.BVTSonar_GetSerialNumber.restype = c_int
dll.BVTSonar_GetSerialNumber.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTSonar_GetFirmwareRevision.restype = c_int
dll.BVTSonar_GetFirmwareRevision.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTSonar_IsFile.restype = c_int
dll.BVTSonar_IsFile.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_FileHasRawPingData.restype = c_int
dll.BVTSonar_FileHasRawPingData.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_IsConnected.restype = c_int
dll.BVTSonar_IsConnected.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_SupportsMulticast.restype = c_int
dll.BVTSonar_SupportsMulticast.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_RevertFactorySettings.restype = c_int
dll.BVTSonar_RevertFactorySettings.argtypes = (c_void_p, )
dll.BVTSonar_GetFileSize.restype = c_int
dll.BVTSonar_GetFileSize.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_GetTimeIndexedPingCount.restype = c_int
dll.BVTSonar_GetTimeIndexedPingCount.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_GetTimeIndexedPing.restype = c_int
dll.BVTSonar_GetTimeIndexedPing.argtypes = (c_void_p, c_int, POINTER(c_void_p), )
dll.BVTSonar_GetHead.restype = c_int
dll.BVTSonar_GetHead.argtypes = (c_void_p, c_int, POINTER(c_void_p), )
dll.BVTSonar_GetHeadCount.restype = c_int
dll.BVTSonar_GetHeadCount.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_GetSonarModelName.restype = c_int
dll.BVTSonar_GetSonarModelName.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTSonar_GetSonarName.restype = c_int
dll.BVTSonar_GetSonarName.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTSonar_SetSonarName.restype = c_int
dll.BVTSonar_SetSonarName.argtypes = (c_void_p, c_char_p, )
dll.BVTSonar_GetTemperature.restype = c_int
dll.BVTSonar_GetTemperature.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTSonar_PutNavData.restype = c_int
dll.BVTSonar_PutNavData.argtypes = (c_void_p, c_void_p, )
dll.BVTSonar_GetNavDataCount.restype = c_int
dll.BVTSonar_GetNavDataCount.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_GetNavDataCopy.restype = c_int
dll.BVTSonar_GetNavDataCopy.argtypes = (c_void_p, c_int, POINTER(c_void_p), )
dll.BVTSonar_PutOrientation.restype = c_int
dll.BVTSonar_PutOrientation.argtypes = (c_void_p, c_void_p, )
dll.BVTSonar_GetOrientationCount.restype = c_int
dll.BVTSonar_GetOrientationCount.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_GetOrientationCopy.restype = c_int
dll.BVTSonar_GetOrientationCopy.argtypes = (c_void_p, c_int, POINTER(c_void_p), )
dll.BVTSonar_PutEventMark.restype = c_int
dll.BVTSonar_PutEventMark.argtypes = (c_void_p, c_char_p, c_char_p, )
dll.BVTSonar_GetEventMarkCount.restype = c_int
dll.BVTSonar_GetEventMarkCount.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_GetEventMarkCopy.restype = c_int
dll.BVTSonar_GetEventMarkCopy.argtypes = (c_void_p, c_int, POINTER(c_void_p), )
dll.BVTSonar_GetNetworkSettings.restype = c_int
dll.BVTSonar_GetNetworkSettings.argtypes = (c_void_p, POINTER(c_void_p), )
dll.BVTSonar_SetNetworkSettings.restype = c_int
dll.BVTSonar_SetNetworkSettings.argtypes = (c_void_p, c_void_p, )
dll.BVTSonar_GetTimestampsUseLocalClock.restype = c_int
dll.BVTSonar_GetTimestampsUseLocalClock.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_SetTimestampsUseLocalClock.restype = c_int
dll.BVTSonar_SetTimestampsUseLocalClock.argtypes = (c_void_p, c_int, )
dll.BVTSonar_DumpToFile.restype = c_int
dll.BVTSonar_DumpToFile.argtypes = (c_void_p, c_char_p, )
dll.BVTSonar_SupportsTargetTracking.restype = c_int
dll.BVTSonar_SupportsTargetTracking.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_SupportsSourceLevelControl.restype = c_int
dll.BVTSonar_SupportsSourceLevelControl.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_GetSourceLevel.restype = c_int
dll.BVTSonar_GetSourceLevel.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTSonar_SetSourceLevel.restype = c_int
dll.BVTSonar_SetSourceLevel.argtypes = (c_void_p, c_float, )
dll.BVTSonar_EnableAutoSourceLevel.restype = c_int
dll.BVTSonar_EnableAutoSourceLevel.argtypes = (c_void_p, c_int, )
dll.BVTSonar_IsAutoSourceLevelEnabled.restype = c_int
dll.BVTSonar_IsAutoSourceLevelEnabled.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_SupportsExternalHardwareTrigger.restype = c_int
dll.BVTSonar_SupportsExternalHardwareTrigger.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_EnableExternalHardwareTrigger.restype = c_int
dll.BVTSonar_EnableExternalHardwareTrigger.argtypes = (c_void_p, c_int, )
dll.BVTSonar_DisableExternalHardwareTrigger.restype = c_int
dll.BVTSonar_DisableExternalHardwareTrigger.argtypes = (c_void_p, )
dll.BVTSonar_EnableExternalHardwareTriggerOutput.restype = c_int
dll.BVTSonar_EnableExternalHardwareTriggerOutput.argtypes = (c_void_p, c_int, )
dll.BVTSonar_GetExternalHardwareTriggerEnabled.restype = c_int
dll.BVTSonar_GetExternalHardwareTriggerEnabled.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_GetExternalHardwareTriggerDirection.restype = c_int
dll.BVTSonar_GetExternalHardwareTriggerDirection.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_GetExternalHardwareTriggerInputDelay.restype = c_int
dll.BVTSonar_GetExternalHardwareTriggerInputDelay.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTSonar_GetExternalHardwareTriggerOutputEvent.restype = c_int
dll.BVTSonar_GetExternalHardwareTriggerOutputEvent.argtypes = (c_void_p, POINTER(c_int), )


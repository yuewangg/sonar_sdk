"""
This file was generated by bvtidl.pl.
Your changes will most likely be lost.
"""

from ctypes import *
import sys
import sdkerror


class Orientation(object):
    """
    Orientation contains various types of user-accessible parameters useful for specifying the position
    and orientation of a Head relative to the vessel or ROV.   Ping and Head contain Orientation objects, but
    this interface allows Orientation objects to be stored independently of a Ping or Head.
    The Orientation objects can be created and destroyed as needed.   This allows Orientation objects 
    to be pre-allocated and filled from various instrument sources. It also allows the data to be copied from one
    Orientation object to the other.
    NOTE: Orientation objects will only be saved to a sonar of type FILE. 
    """
    def __init__(self, handle=None):
        super(Orientation, self).__setattr__("_initialized", False)
        self._deleted = False
        if handle is None:
            self._handle = dll.BVTOrientation_Create()
        else:
            self._handle = handle
        super(Orientation, self).__setattr__("_initialized", True)

    def __del__(self):
        self._deleted = True
        dll.BVTOrientation_Destroy(self._handle)

    def __setattr__(self, name, value):
        """ Don't allow setting non-existent attributes on this class
        """
        if self._initialized and not hasattr(self, name):
            raise AttributeError("%s instance has no attribute '%s'" % (self.__class__.__name__, name))
        super(Orientation, self).__setattr__(name, value)

    OR_UNKNOWN = 0
    OR_HEAD = 1
    OR_POSITIONER = 2
    OR_VEHICLE = 3
    OR_LOCAL_LEVEL = 4
    OR_MRU = 5
    OR_GPS = 6
    OR_IMU = 7
    OR_ROV = 8
    OR_UUV = 9
    OR_OTHER = 10
    OR_ROTATIONDIRECTION_UNKNOWN = 0
    OR_ROTATIONDIRECTION_POSITIVE = 1
    OR_ROTATIONDIRECTION_NEGATIVE = 2
    OR_ROTATIONAXIS_UNKNOWN = 0
    OR_ROTATIONAXIS_ROLL = 1
    OR_ROTATIONAXIS_PITCH = 2
    OR_ROTATIONAXIS_YAW = 3
    OR_HEADORIENTATION_UNKNOWN = 0
    OR_HEADORIENTATION_HORIZONTAL = 1
    OR_HEADORIENTATION_VERTICAL = 2
    def set_data(self, source, target, X_axis_degrees, Y_axis_degrees, Z_axis_degrees, X_axis_offset, Y_axis_offset, Z_axis_offset):
        """
        Position and orientation of target (e.g. HEAD) relative to source (e.g. POSITIONER).
        """
        error_code = dll.BVTOrientation_SetData(self._handle, source, target, X_axis_degrees, Y_axis_degrees, Z_axis_degrees, X_axis_offset, Y_axis_offset, Z_axis_offset)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def get_data(self, source, target, X_axis_degrees, Y_axis_degrees, Z_axis_degrees, X_axis_offset, Y_axis_offset, Z_axis_offset):
        """
        Position of the SOURCE relative to the TARGET.
        """
        error_code = dll.BVTOrientation_GetData(self._handle, byref(source), byref(target), byref(X_axis_degrees), byref(Y_axis_degrees), byref(Z_axis_degrees), byref(X_axis_offset), byref(Y_axis_offset), byref(Z_axis_offset))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def set_pan_tilt_calibration_data(self, head_orientation, x_raw_direction, x_axis_affected, x_axis_direction, y_raw_direction, y_axis_affected, y_axis_direction, z_raw_direction, z_axis_affected, z_axis_direction):
        """
        head_orientation describes how the sonar is oriented in the pan/tilt unit.  
        Vertical indicates that the transducer plane is parallel to the pan/tilt unit's base (pan) motor.
        Horizontal indicates that the transducer plane is parallel to the elbow (tilt) motor.
        Describes how an increase/decrease in pan (x_raw_direction) and tilt (y_raw_direction) position changes the sonar position in the vessel coordinate system. 
        Blueview convention is that the x axis is the hardware base motor which pans the sonar and the y axis is the elbow motor which tilts the sonar.
        The z axis is currently not used.
        """
        error_code = dll.BVTOrientation_SetPanTiltCalibrationData(self._handle, head_orientation, x_raw_direction, x_axis_affected, x_axis_direction, y_raw_direction, y_axis_affected, y_axis_direction, z_raw_direction, z_axis_affected, z_axis_direction)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def get_pan_tilt_calibration_data(self, head_orientation, x_raw_direction, x_axis_affected, x_axis_direction, y_raw_direction, y_axis_affected, y_axis_direction, z_raw_direction, z_axis_affected, z_axis_direction):
        """
        head_orientation describes how the sonar is oriented in the pan/tilt unit.  
        Vertical indicates that the transducer plane is parallel to the pan/tilt unit's base (pan) motor.
        Horizontal indicates that the transducer plane is parallel to the elbow (tilt) motor.
        Describes how an increase/decrease in pan (x_raw_direction) and tilt (y_raw_direction) position changes the sonar position in the vessel coordinate system. 
        Blueview convention is that the x axis is the hardware base motor which pans the sonar and the y axis is the elbow motor which tilts the sonar.
        The z axis is currently not used.
        """
        error_code = dll.BVTOrientation_GetPanTiltCalibrationData(self._handle, byref(head_orientation), byref(x_raw_direction), byref(x_axis_affected), byref(x_axis_direction), byref(y_raw_direction), byref(y_axis_affected), byref(y_axis_direction), byref(z_raw_direction), byref(z_axis_affected), byref(z_axis_direction))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def timestamp(self):
        """
        Return the timestamp in seconds since 00:00:00 UTC, January 1, 1970 
        The timestamp is a standard UNIX time stamp. This is 
        a similar value to that returned by the time() C standard library 
        function. In fact, the only difference is the addition of fractional seconds.
        """
        timestamp = c_double()
        error_code = dll.BVTOrientation_GetTimestamp(self._handle, byref(timestamp))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return timestamp.value

    @timestamp.setter
    def timestamp(self, sec):
        """
        Set the time stamp.  
        """
        error_code = dll.BVTOrientation_SetTimestamp(self._handle, sec)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)


    def get_handle(self):
        """
        SDK object pointer
        """
        return self._handle
if "win32" in sys.platform:
    dll_name = "bvtsdk4.dll"
elif "darwin" in sys.platform:
    dll_name = "libbvtsdk.dylib"
else:
    dll_name = "libbvtsdk.so"
dll = CDLL(dll_name)
dll.BVTOrientation_Create.restype = c_void_p
dll.BVTOrientation_Destroy.restype = None
dll.BVTOrientation_Destroy.argtypes = (c_void_p,)
dll.BVTOrientation_SetData.restype = c_int
dll.BVTOrientation_SetData.argtypes = (c_void_p, c_int, c_int, c_double, c_double, c_double, c_double, c_double, c_double, )
dll.BVTOrientation_GetData.restype = c_int
dll.BVTOrientation_GetData.argtypes = (c_void_p, POINTER(c_int), POINTER(c_int), POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double), )
dll.BVTOrientation_SetPanTiltCalibrationData.restype = c_int
dll.BVTOrientation_SetPanTiltCalibrationData.argtypes = (c_void_p, c_int, c_int, c_int, c_int, c_int, c_int, c_int, c_int, c_int, c_int, )
dll.BVTOrientation_GetPanTiltCalibrationData.restype = c_int
dll.BVTOrientation_GetPanTiltCalibrationData.argtypes = (c_void_p, POINTER(c_int), POINTER(c_int), POINTER(c_int), POINTER(c_int), POINTER(c_int), POINTER(c_int), POINTER(c_int), POINTER(c_int), POINTER(c_int), POINTER(c_int), )
dll.BVTOrientation_GetTimestamp.restype = c_int
dll.BVTOrientation_GetTimestamp.argtypes = (c_void_p, POINTER(c_double), )
dll.BVTOrientation_SetTimestamp.restype = c_int
dll.BVTOrientation_SetTimestamp.argtypes = (c_void_p, c_double, )


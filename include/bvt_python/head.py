from bvt_python.ping import *
from bvt_python.orientation import *
from bvt_python.error import *

"""
This file was generated by bvtidl.pl.
Your changes will most likely be lost.
"""

from ctypes import *
import sys
import sdkerror


class Head(object):
    """
    A head consists of a group of co-planar transducers which are
    operated simultaneously to produce (ultimately) a single 2d
    image.  The Head object provides functions to change the 
    range window as well as produce pings.
    """
    def __init__(self, parent, handle):
        super(Head, self).__setattr__("_initialized", False)
        self._deleted = False
        if handle is None or type(handle) is not c_void_p:
            raise Exception("Class Head cannot be directly instantiated")
        else:
            self._handle = handle
        # The parent must not be garbage collected until this instance
        # is deleted
        self._parent = parent
        super(Head, self).__setattr__("_initialized", True)

    def __del__(self):
        self._deleted = True
        dll.BVTHead_Destroy(self._handle)

    def __setattr__(self, name, value):
        """ Don't allow setting non-existent attributes on this class
        """
        if self._initialized and not hasattr(self, name):
            raise AttributeError("%s instance has no attribute '%s'" % (self.__class__.__name__, name))
        super(Head, self).__setattr__(name, value)

    @property
    def head_id(self):
        """
        Retrieve the Head's ID.
        """
        headId = c_int()
        error_code = dll.BVTHead_GetHeadID(self._handle, byref(headId))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return headId.value

    @property
    def head_name(self):
        """
        Retrieves a copy of a the name of the head. The head name is currently
        set only at the factory, and is simply "Head" on many sonars. Only special
        order sonars with multiple heads are likely to have a different name.<br>
        The length of the name has no actual limit, though 80 characters
        would seem to be more than enough.
        """
        buffer_size = 255
        buffer = create_string_buffer(buffer_size)
        error_code = dll.BVTHead_GetHeadName(self._handle, buffer, buffer_size)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (buffer.value)

    @head_name.setter
    def head_name(self, name):
        """
        Persistently sets the name of the head. This should not be done frequently due
        wear on the sonar's onboard storage (Flash memory). The head name is currently
        set at the factory, and is simply "Head" on many sonars. Only special
        order sonars with multiple heads are likely to have a different name.
        """
        error_code = dll.BVTHead_SetHeadName(self._handle, (name))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def set_range(self, start, stop):
        """
        Set the range to be acquired.
        @note The start range must be greater than or equal to @ref GetMinimumRange, and the stop range must be less than or equal to @ref GetMaximumRange
        \warning You may not call this during recording on either the source sonar or the destination file sonar.
        """
        error_code = dll.BVTHead_SetRange(self._handle, start, stop)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def start_range(self):
        """
        Retrieve the current starting range in meters
        """
        start = c_float()
        error_code = dll.BVTHead_GetStartRange(self._handle, byref(start))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return start.value

    @property
    def stop_range(self):
        """
        Retrieve the current stopping range in meters.
        """
        stop = c_float()
        error_code = dll.BVTHead_GetStopRange(self._handle, byref(stop))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return stop.value

    @property
    def minimum_range(self):
        """
        Return the minimum allowable range for this head.
        """
        range = c_float()
        error_code = dll.BVTHead_GetMinimumRange(self._handle, byref(range))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return range.value

    @property
    def maximum_range(self):
        """
        Return the maximum allowable range for this head.
        """
        range = c_float()
        error_code = dll.BVTHead_GetMaximumRange(self._handle, byref(range))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return range.value

    @start_range.setter
    def start_range(self, start):
        """
        Set the start range of this head in meters.
        @note The start range must be greater than or equal to @ref GetMinimumRange.
        """
        error_code = dll.BVTHead_SetStartRange(self._handle, start)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @stop_range.setter
    def stop_range(self, stop):
        """
        Set the stop range of this head in meters.
        @note The stop range must be less than or equal to @ref GetMaximumRange
        """
        error_code = dll.BVTHead_SetStopRange(self._handle, stop)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def clipping_threshold(self):
        """
        [obsolete]
        GetClippingThreshold returns the integer value of the clipping threshold 
        """
        threshold = c_int()
        error_code = dll.BVTHead_GetClippingThreshold(self._handle, byref(threshold))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return threshold.value

    @clipping_threshold.setter
    def clipping_threshold(self, threshold):
        """
        SetClippingThreshold function will set the maximum (+-) raw data 
        value from the ADC.  If this threshold is reached the entire signal 
        is zeroed out so that clipping is not propagated through out the 
        image.  The threshold is an integer ranging from 1 to 4096 (2^12).
        """
        error_code = dll.BVTHead_SetClippingThreshold(self._handle, threshold)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def fluid_type(self):
        """
        Return the type of water the head is in.  The returned value will correspond to 
        one of the FLUIDTYPE_* constants.
        """
        fluidType = c_int()
        error_code = dll.BVTHead_GetFluidType(self._handle, byref(fluidType))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return fluidType.value

    @fluid_type.setter
    def fluid_type(self, fluid):
        """
        Set the type of water the head is in
        """
        error_code = dll.BVTHead_SetFluidType(self._handle, ( c_int(fluid) ))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def sound_speed(self):
        """
        Return the current speed of sound in water for this head in meters per second.
        Note that the returned sound speed is not measured by the sonar, but simply reflects the value currently set.
        """
        speed = c_int()
        error_code = dll.BVTHead_GetSoundSpeed(self._handle, byref(speed))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return speed.value

    @sound_speed.setter
    def sound_speed(self, speed):
        """
        Set the current speed of sound in water for this head in meters per second.
        """
        error_code = dll.BVTHead_SetSoundSpeed(self._handle, speed)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def gain_adjustment(self):
        """
        Return the additional analog gain in dB
        """
        gain = c_float()
        error_code = dll.BVTHead_GetGainAdjustment(self._handle, byref(gain))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return gain.value

    @gain_adjustment.setter
    def gain_adjustment(self, gain):
        """
        Set the additional analog gain. 
        """
        error_code = dll.BVTHead_SetGainAdjustment(self._handle, gain)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def tvg_slope(self):
        """
        Return the time variable gain in dB/meter. Note that the parameter is per unit distance, not per unit time. This is a convenience to remove the dependence on the sound speed for clients.
        """
        slope = c_float()
        error_code = dll.BVTHead_GetTVGSlope(self._handle, byref(slope))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return slope.value

    @tvg_slope.setter
    def tvg_slope(self, tvg):
        """
        Set the  time variable analog gain. Note that the parameter is per unit distance, not per unit time. This is a convenience to remove the dependence on the sound speed for clients.
        """
        error_code = dll.BVTHead_SetTVGSlope(self._handle, tvg)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def dynamic_power_management(self):
        """
        Return true if this Head has dynamic power management enabled.
        """
        is_enabled = c_int()
        error_code = dll.BVTHead_GetDynamicPowerManagement(self._handle, byref(is_enabled))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return is_enabled.value > 0

    @dynamic_power_management.setter
    def dynamic_power_management(self, enable):
        """
        Note: Most BlueView sonars don't support dynamic power managment.
        """
        error_code = dll.BVTHead_SetDynamicPowerManagement(self._handle, ( 1 if enable else 0))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def supports_alternate_ping_mode(self):
        """
        Latest-generation BlueView sonar support two modes of operation,
        a standard and an alternate mode. The alternate mode provides improved imagery for
        wide field-of-view sonar (greater than 45 degrees) at the cost of a slower max
        ping rate, while dual mode maximizes ping rate but reduces image
        quality. This call provides the user details about whether the alternate
        ping mode is supported on the given sonar head.
        """
        is_supported = c_int()
        error_code = dll.BVTHead_SupportsAlternatePingMode(self._handle, byref(is_supported))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return is_supported.value > 0

    @property
    def alternate_ping_mode_enabled(self):
        """
        Obtains the ping mode for the given sonar head.
        It is only valid for sonar heads that support alternate ping mode
        selection (see SupportsAlternatePingModemd()).
        """
        enabled = c_int()
        error_code = dll.BVTHead_GetAlternatePingModeEnabled(self._handle, byref(enabled))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return enabled.value > 0

    @alternate_ping_mode_enabled.setter
    def alternate_ping_mode_enabled(self, enabled):
        """
        Sets the ping mode on sonar head. It is only
        valid for sonar heads that support alternate ping mode.
        (see SupportsAlternatePingMode()).
        """
        error_code = dll.BVTHead_SetAlternatePingModeEnabled(self._handle, ( 1 if enabled else 0))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def center_freq(self):
        """
        Return the center frequency(in Hz) of this head.
        """
        frequency = c_int()
        error_code = dll.BVTHead_GetCenterFreq(self._handle, byref(frequency))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return frequency.value

    @property
    def ping_count(self):
        """
        Return the number of pings 'in' this head
        A head attached to a file might have more than one ping recorded.  However, a networked sonar will only have a single ping.
        """
        count = c_int()
        error_code = dll.BVTHead_GetPingCount(self._handle, byref(count))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return count.value

    def get_ping(self, ping_num):
        """
        Retrieve a Ping from the Head
        If ping_num is less than 0, return the next ping in the file. Otherwise, load the specified ping.  
        If the Head is attached to a 'live' sonar (network), then GetPing always acquires a new ping.
        """
        ping_ptr = c_void_p()
        error_code = dll.BVTHead_GetPing(self._handle, ping_num, byref(ping_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        ping = Ping(self, ping_ptr)
        return ping

    def get_ping_metadata_only(self, ping_num):
        """
        \note This Head must be attached to a 'file' sonar.
        Retrieve a Ping's metadata from the Head, skipping its signal data.
        \warning You cannot create imagery from the ping returned by this function.
        \warning Do not store the returned ping to another file unless you intend to never create imagery.
        If ping_num is less than 0, return the next ping in the file. Otherwise, load the specified ping.
        """
        ping_ptr = c_void_p()
        error_code = dll.BVTHead_GetPingMetadataOnly(self._handle, ping_num, byref(ping_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        ping = Ping(self, ping_ptr)
        return ping

    def get_ping_multicast(self, ping_num):
        """
        Retrieve a Ping from a networked Head.
        The Head must be attached to a 'live' sonar (network) which supports multicast pings.
        """
        ping_ptr = c_void_p()
        error_code = dll.BVTHead_GetPingMulticast(self._handle, ping_num, byref(ping_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        ping = Ping(self, ping_ptr)
        return ping

    def listen_for_ping_multicast(self):
        """
        Retrieve a multicast Ping from a networked Head, but do not ask the Head to emit a ping.
        The Head must be attached to a 'live' sonar (network) which supports multicast pings.
        See also: Sonar_SupportsMulticast
        """
        ping_ptr = c_void_p()
        error_code = dll.BVTHead_ListenForPingMulticast(self._handle, byref(ping_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        ping = Ping(self, ping_ptr)
        return ping

    def put_ping(self, source_ping):
        """
        Write a ping to a file.
        \warning The source_ping's Head must match this Head.
        """
        error_code = dll.BVTHead_PutPing(self._handle, source_ping._handle)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def ping_interval(self):
        """
        
        """
        milliseconds = c_int()
        error_code = dll.BVTHead_GetPingInterval(self._handle, byref(milliseconds))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return milliseconds.value

    @ping_interval.setter
    def ping_interval(self, milliseconds):
        """
        Setting this to a non-zero number will cause a multicast ping to be emitted every N milliseconds.
        This is only supported on sonar with newer firmware, and support can be checked with @ref BVTSonar_SupportsMulticast.
        """
        error_code = dll.BVTHead_SetPingInterval(self._handle, milliseconds)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def set_image_req_size(self, height, width):
        """
        Set the requested out image size
        The processing code will attempt to process images at the specified size.
        However, it doesn't guarantee that the final output will match this size.
        NOTE: For R-Theta images, only the width is used, and the image will
        be created with that exact width. Height will depend on the range,
        and the resolution set. (See SetImageRes() and SetRangeResolution())
        """
        error_code = dll.BVTHead_SetImageReqSize(self._handle, height, width)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def get_xy_image_size_requested(self, height, width):
        """
        Return the XY dimensions
        """
        error_code = dll.BVTHead_GetXYImageSizeRequested(self._handle, byref(height), byref(width))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def set_xy_image_size(self, width, height):
        """
        Set the XY image size
        This is a helper function to accompany the Ping's GetImageXY() function.
        """
        error_code = dll.BVTHead_SetXYImageSize(self._handle, width, height)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def image_filter_flags(self):
        """
        Return the filter flags.  As of this version, if more than one flag is set, only the lowest-valued flag is used.
        """
        flags = c_int()
        error_code = dll.BVTHead_GetImageFilterFlags(self._handle, byref(flags))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return flags.value

    @image_filter_flags.setter
    def image_filter_flags(self, flags):
        """
        Set the filter flags. As of this version, if more than one flag is set, only the lowest-valued flag is used.
        """
        error_code = dll.BVTHead_SetImageFilterFlags(self._handle, ( c_int(flags) ))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def image_processing_method(self):
        """
        Inform the user about which type of image processing algorithm is being used.
        The returned value will correspond to one of the IMAGE_PROCESSING_METHOD_* constants.
        """
        method = c_int()
        error_code = dll.BVTHead_GetImageProcessingMethod(self._handle, byref(method))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return method.value

    @property
    def image_calibration_a(self):
        """
        Return the current image calibration value A.
        """
        cal_value_a = c_int()
        error_code = dll.BVTHead_GetImageCalibrationA(self._handle, byref(cal_value_a))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return cal_value_a.value

    @image_calibration_a.setter
    def image_calibration_a(self, cal_value_a):
        """
        Set the image calibration value for A.
        This function should only be used for older sonars.  Before using this function,
        call @ref GetImageProcessingMethod and test the return value.  If the return
        value is IMAGE_PROCESSING_METHOD_A (0), then this function may be used, otherwise, do not
        use this function.
        NOTE: These values will be permanently saved on the sonar,
        and the sonar's FLASH memory has limited write cycles available,
        so this function should not be called often.
        """
        error_code = dll.BVTHead_SetImageCalibrationA(self._handle, cal_value_a)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def image_calibration_b(self):
        """
        Return the current image calibration value B.
        """
        cal_value_b = c_int()
        error_code = dll.BVTHead_GetImageCalibrationB(self._handle, byref(cal_value_b))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return cal_value_b.value

    @image_calibration_b.setter
    def image_calibration_b(self, cal_value_b):
        """
        Set the image calibration value for B.
        This function should only be used for older sonars.  Before using this function,
        call  @ref GetImageProcessingMethod() and test the return value.  If the return
        value is IMAGE_PROCESSING_METHOD_A (0), then this function may be used, otherwise, do not
        use this function.
        NOTE: These values will be permanently saved on the sonar,
        and the sonar's FLASH memory has limited write cycles available,
        so this function should not be called often.
        """
        error_code = dll.BVTHead_SetImageCalibrationB(self._handle, cal_value_b)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def get_mounting_orientation_copy(self):
        """
        Retrieves a copy of the MountingOrientation object stored with this head. Note
        that the data is copied out of the head into the local Orientation object,
        a pointer to internal data is not returned. Thus, the Orientation object
        may be used after the head is destroyed.
        """
        orient_ptr = c_void_p()
        error_code = dll.BVTHead_GetMountingOrientationCopy(self._handle, byref(orient_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        orient = Orientation(orient_ptr)
        return orient

    def get_aux_mounting_orientation_copy(self):
        """
        Retrieves a copy of the MountingOrientation object stored with this head. Note
        that the data is copied out of the head into the local Orientation object,
        a pointer to internal data is not returned. Thus, the Orientation object
        may be used after the head is destroyed.
        This second (auxillary) Orientation object is optional.  Calling this function on an unused auxillary Orientation will return all zeros. 
        """
        orient_ptr = c_void_p()
        error_code = dll.BVTHead_GetAuxMountingOrientationCopy(self._handle, byref(orient_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        orient = Orientation(orient_ptr)
        return orient

    @property
    def transducer_count(self):
        """
        Return the number of transducers for this head
        """
        count = c_int()
        error_code = dll.BVTHead_GetTransducerCount(self._handle, byref(count))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return count.value

    def get_transducer_orientation_copy(self, transducer_index):
        """
        Get the transducer orientation for the specified transducer index.
        """
        orient_ptr = c_void_p()
        error_code = dll.BVTHead_GetTransducerOrientationCopy(self._handle, transducer_index, byref(orient_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        orient = Orientation(orient_ptr)
        return orient

    @property
    def mount_type(self):
        """
        Returns the mount type.  The returned value will correspond to
        one of the MOUNTTYPE_* constants.
        """
        type = c_int()
        error_code = dll.BVTHead_GetMountType(self._handle, byref(type))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return type.value

    @mount_type.setter
    def mount_type(self, type):
        """
        Identifies the general configuration of how this data was collected.
        """
        error_code = dll.BVTHead_SetMountType(self._handle, ( c_int(type) ))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def mount_side(self):
        """
        Return where the sonar was mounted when this data was collected.
        The returned value will correspond to one of the SIDE_* constants.
        """
        side = c_int()
        error_code = dll.BVTHead_GetMountSide(self._handle, byref(side))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return side.value

    @mount_side.setter
    def mount_side(self, side):
        """
        Specifiy where the sonar was mounted when this data was collected.
        """
        error_code = dll.BVTHead_SetMountSide(self._handle, ( c_int(side) ))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def mru_time_offset(self):
        """
        This offset is calculated as MRU time - Sonar time;
        """
        milliseconds = c_int()
        error_code = dll.BVTHead_GetMRUTimeOffset(self._handle, byref(milliseconds))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return milliseconds.value

    @mru_time_offset.setter
    def mru_time_offset(self, milliseconds):
        """
        This offset is calculated as MRU time - Sonar time;
        """
        error_code = dll.BVTHead_SetMRUTimeOffset(self._handle, milliseconds)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def set_pole_gps_bearing(self, bearing, distance):
        """
        
        """
        error_code = dll.BVTHead_SetPoleGPSBearing(self._handle, bearing, distance)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def get_pole_gps_bearing(self, bearing, distance):
        """
        
        """
        error_code = dll.BVTHead_GetPoleGPSBearing(self._handle, byref(bearing), byref(distance))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def pole_landmark_bearing(self):
        """
        Returns bearing in degrees from pole mount to landmark. 
        """
        return dll.BVTHead_GetPoleLandmarkBearing(self._handle)

    @pole_landmark_bearing.setter
    def pole_landmark_bearing(self, bearing):
        """
        
        """
        error_code = dll.BVTHead_SetPoleLandmarkBearing(self._handle, bearing)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def heading_offset(self):
        """
        Returns offset in degrees from compass North. 
        This is used in tripod mount situations where the default/baseline/normal/center
        position of the Head is not aligned with the tripod-mounted compass's
        North direction.
        """
        offset = c_float()
        error_code = dll.BVTHead_GetHeadingOffset(self._handle, byref(offset))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return offset.value

    @heading_offset.setter
    def heading_offset(self, offset):
        """
        This is used in tripod mount situations where the default/baseline/normal/center
        position of the Head is not aligned with the tripod-mounted compass's
        North direction.
        This offset is calculated as MRU time - Sonar time;         
        """
        error_code = dll.BVTHead_SetHeadingOffset(self._handle, offset)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def set_pan_tilt_attributes(self, manufacturer, model, elbowOffset):
        """
        This is used to compute x,y,z offsets driven by the tilt position.
        The manufacturer and model strings are limited to a maximum of 79 characters, not counting the terminating null characters.
        """
        error_code = dll.BVTHead_SetPanTiltAttributes(self._handle, (manufacturer), (model), elbowOffset)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def pan_tilt_manufacturer(self):
        """
        Returns the name of the Pan-Tilt manufacturer as a string.
        """
        buffer_length = 255
        manufacturer = create_string_buffer(buffer_size)
        error_code = dll.BVTHead_GetPanTiltManufacturer(self._handle, manufacturer, buffer_length)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (manufacturer.value)

    @property
    def pan_tilt_manufacturer_length(self):
        """
        Returns the length of the name of the Pan-Tilt manufacturer as a string.
        """
        buffer_length = c_int()
        error_code = dll.BVTHead_GetPanTiltManufacturerLength(self._handle, byref(buffer_length))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return buffer_length.value

    @property
    def pan_tilt_model(self):
        """
        Returns the model name.
        """
        buffer_length = 255
        model = create_string_buffer(buffer_size)
        error_code = dll.BVTHead_GetPanTiltModel(self._handle, model, buffer_length)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (model.value)

    @property
    def pan_tilt_model_length(self):
        """
        Returns the length of the model name.
        """
        buffer_length = c_int()
        error_code = dll.BVTHead_GetPanTiltModelLength(self._handle, byref(buffer_length))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return buffer_length.value

    @property
    def pan_tilt_elbow_offset(self):
        """
        This is used to compute x,y,z offsets driven by the tilt position. Elbow offset specified in meters
        """
        offset = c_float()
        error_code = dll.BVTHead_GetPanTiltElbowOffset(self._handle, byref(offset))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return offset.value

    def get_pan_tilt_mount_offsets(self, tiltElbowVerticalOffset, tiltElbowHorizontalOffset, panRotationOffset, tiltRotationOffset, verticalInverted):
        """
        Helper function to retrieve the pan/tilt mount offsets.  
        The panRotationOffset and tiltRotationOffset values should be subtracted 
        from the X_axis_degrees (pan) and Y_axis_degrees (tilt) parameters 
        of the BVTPing_GetPositionerRotations() function to obtain 
        the same pan & tilt values displayed during data collection.
        If verticalInverted is false(0), then the tilt value obtained in the 
        step above must be multiplied by -1.0 to represent real-world tilt values.
        """
        error_code = dll.BVTHead_GetPanTiltMountOffsets(self._handle, byref(tiltElbowVerticalOffset), byref(tiltElbowHorizontalOffset), byref(panRotationOffset), byref(tiltRotationOffset), byref(verticalInverted))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def set_pan_tilt_mount_offsets(self, tiltElbowVerticalOffset, tiltElbowHorizontalOffset, panRotationOffset, tiltRotationOffset, verticalInverted):
        """
        Helper function to set the pan/tilt mount offsets.  
        The panRotationOffset and tiltRotationOffset values should be subtracted 
        from the X_axis_degrees (pan) and Y_axis_degrees (tilt) parameters 
        of the BVTPing_GetPositionerRotations() function to obtain 
        the same pan & tilt values displayed during data collection.
        verticalInverted is set to false(0) if the pan/tilt device has been mounted in an inverted fashion.
        """
        error_code = dll.BVTHead_SetPanTiltMountOffsets(self._handle, tiltElbowVerticalOffset, tiltElbowHorizontalOffset, panRotationOffset, tiltRotationOffset, verticalInverted)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    class _pingsIterator:
        def __init__(self, sdk_object, func, low, high):
            self.sdk_object = sdk_object
            self.func = func
            self.current = low
            self.high = high

        def __iter__(self):
            return self

        def __len__(self):
            return self.sdk_object.ping_count

        def next(self): # Python 3: def __next__(self)
            if self.current > self.high:
                raise StopIteration
            else:
                self.current += 1
                return self.func(self.sdk_object, self.current - 1)

    def pings(self): # NB: ClassName.func_name Doesn't allow dependency injection
        """
        Returns an iterator calling get_ping() from 0 to ping_count - 1
        """
        iter = Head._pingsIterator(self, Head.get_ping, 0, self.ping_count - 1)
        return iter

    FLUIDTYPE_SALTWATER = 0
    FLUIDTYPE_FRESHWATER = 1
    FLUIDTYPE_OTHER = 2
    IMAGERES_OFF = 0
    IMAGERES_LOW = 1
    IMAGERES_MEDIUM = 2
    IMAGERES_HIGH = 3
    IMAGERES_AUTO = 4
    IMAGETYPE_XY = 0
    IMAGETYPE_RTHETA = 1
    IMAGEFILTERFLAGS_NONE = 0
    IMAGEFILTERFLAGS_MEAN3X3 = 2
    IMAGEFILTERFLAGS_MEAN9X2 = 16
    IMAGEPROCESSINGMETHOD_A = 0
    IMAGEPROCESSINGMETHOD_B = 1
    MOUNTTYPE_UNKNOWN = 0
    MOUNTTYPE_POLE = 1
    MOUNTTYPE_TRIPOD = 2
    MOUNTTYPE_ROV = 3
    MOUNTTYPE_UUV = 4
    MOUNTTYPE_OTHER = 5
    MOUNTSIDE_UNKNOWN = 0
    MOUNTSIDE_PORT = 1
    MOUNTSIDE_STARBOARD = 2
    MOUNTSIDE_DORSAL = 3
    MOUNTSIDE_VENTRAL = 4
    MOUNTSIDE_BOW = 5
    MOUNTSIDE_STERN = 6
    MOUNTSIDE_OTHER = 7

    def get_handle(self):
        """
        SDK object pointer
        """
        return self._handle
        def get_Sonar(self):
            return self._parent

if "win32" in sys.platform:
    dll_name = "bvtsdk4.dll"
elif "darwin" in sys.platform:
    dll_name = "libbvtsdk.dylib"
else:
    dll_name = "libbvtsdk.so"
dll = CDLL(dll_name)
dll.BVTHead_Destroy.restype = None
dll.BVTHead_Destroy.argtypes = (c_void_p,)
dll.BVTHead_GetHeadID.restype = c_int
dll.BVTHead_GetHeadID.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_GetHeadName.restype = c_int
dll.BVTHead_GetHeadName.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTHead_SetHeadName.restype = c_int
dll.BVTHead_SetHeadName.argtypes = (c_void_p, c_char_p, )
dll.BVTHead_SetRange.restype = c_int
dll.BVTHead_SetRange.argtypes = (c_void_p, c_float, c_float, )
dll.BVTHead_GetStartRange.restype = c_int
dll.BVTHead_GetStartRange.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTHead_GetStopRange.restype = c_int
dll.BVTHead_GetStopRange.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTHead_GetMinimumRange.restype = c_int
dll.BVTHead_GetMinimumRange.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTHead_GetMaximumRange.restype = c_int
dll.BVTHead_GetMaximumRange.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTHead_SetStartRange.restype = c_int
dll.BVTHead_SetStartRange.argtypes = (c_void_p, c_float, )
dll.BVTHead_SetStopRange.restype = c_int
dll.BVTHead_SetStopRange.argtypes = (c_void_p, c_float, )
dll.BVTHead_GetClippingThreshold.restype = c_int
dll.BVTHead_GetClippingThreshold.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_SetClippingThreshold.restype = c_int
dll.BVTHead_SetClippingThreshold.argtypes = (c_void_p, c_int, )
dll.BVTHead_GetFluidType.restype = c_int
dll.BVTHead_GetFluidType.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_SetFluidType.restype = c_int
dll.BVTHead_SetFluidType.argtypes = (c_void_p, c_int, )
dll.BVTHead_GetSoundSpeed.restype = c_int
dll.BVTHead_GetSoundSpeed.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_SetSoundSpeed.restype = c_int
dll.BVTHead_SetSoundSpeed.argtypes = (c_void_p, c_int, )
dll.BVTHead_GetGainAdjustment.restype = c_int
dll.BVTHead_GetGainAdjustment.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTHead_SetGainAdjustment.restype = c_int
dll.BVTHead_SetGainAdjustment.argtypes = (c_void_p, c_float, )
dll.BVTHead_GetTVGSlope.restype = c_int
dll.BVTHead_GetTVGSlope.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTHead_SetTVGSlope.restype = c_int
dll.BVTHead_SetTVGSlope.argtypes = (c_void_p, c_float, )
dll.BVTHead_GetDynamicPowerManagement.restype = c_int
dll.BVTHead_GetDynamicPowerManagement.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_SetDynamicPowerManagement.restype = c_int
dll.BVTHead_SetDynamicPowerManagement.argtypes = (c_void_p, c_int, )
dll.BVTHead_SupportsAlternatePingMode.restype = c_int
dll.BVTHead_SupportsAlternatePingMode.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_GetAlternatePingModeEnabled.restype = c_int
dll.BVTHead_GetAlternatePingModeEnabled.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_SetAlternatePingModeEnabled.restype = c_int
dll.BVTHead_SetAlternatePingModeEnabled.argtypes = (c_void_p, c_int, )
dll.BVTHead_GetCenterFreq.restype = c_int
dll.BVTHead_GetCenterFreq.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_GetPingCount.restype = c_int
dll.BVTHead_GetPingCount.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_GetPing.restype = c_int
dll.BVTHead_GetPing.argtypes = (c_void_p, c_int, POINTER(c_void_p), )
dll.BVTHead_GetPingMetadataOnly.restype = c_int
dll.BVTHead_GetPingMetadataOnly.argtypes = (c_void_p, c_int, POINTER(c_void_p), )
dll.BVTHead_GetPingMulticast.restype = c_int
dll.BVTHead_GetPingMulticast.argtypes = (c_void_p, c_int, POINTER(c_void_p), )
dll.BVTHead_ListenForPingMulticast.restype = c_int
dll.BVTHead_ListenForPingMulticast.argtypes = (c_void_p, POINTER(c_void_p), )
dll.BVTHead_PutPing.restype = c_int
dll.BVTHead_PutPing.argtypes = (c_void_p, c_void_p, )
dll.BVTHead_GetPingInterval.restype = c_int
dll.BVTHead_GetPingInterval.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_SetPingInterval.restype = c_int
dll.BVTHead_SetPingInterval.argtypes = (c_void_p, c_int, )
dll.BVTHead_SetImageReqSize.restype = c_int
dll.BVTHead_SetImageReqSize.argtypes = (c_void_p, c_int, c_int, )
dll.BVTHead_GetXYImageSizeRequested.restype = c_int
dll.BVTHead_GetXYImageSizeRequested.argtypes = (c_void_p, POINTER(c_int), POINTER(c_int), )
dll.BVTHead_SetXYImageSize.restype = c_int
dll.BVTHead_SetXYImageSize.argtypes = (c_void_p, c_int, c_int, )
dll.BVTHead_GetImageFilterFlags.restype = c_int
dll.BVTHead_GetImageFilterFlags.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_SetImageFilterFlags.restype = c_int
dll.BVTHead_SetImageFilterFlags.argtypes = (c_void_p, c_int, )
dll.BVTHead_GetImageProcessingMethod.restype = c_int
dll.BVTHead_GetImageProcessingMethod.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_GetImageCalibrationA.restype = c_int
dll.BVTHead_GetImageCalibrationA.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_SetImageCalibrationA.restype = c_int
dll.BVTHead_SetImageCalibrationA.argtypes = (c_void_p, c_int, )
dll.BVTHead_GetImageCalibrationB.restype = c_int
dll.BVTHead_GetImageCalibrationB.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_SetImageCalibrationB.restype = c_int
dll.BVTHead_SetImageCalibrationB.argtypes = (c_void_p, c_int, )
dll.BVTHead_GetMountingOrientationCopy.restype = c_int
dll.BVTHead_GetMountingOrientationCopy.argtypes = (c_void_p, POINTER(c_void_p), )
dll.BVTHead_GetAuxMountingOrientationCopy.restype = c_int
dll.BVTHead_GetAuxMountingOrientationCopy.argtypes = (c_void_p, POINTER(c_void_p), )
dll.BVTHead_GetTransducerCount.restype = c_int
dll.BVTHead_GetTransducerCount.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_GetTransducerOrientationCopy.restype = c_int
dll.BVTHead_GetTransducerOrientationCopy.argtypes = (c_void_p, c_int, POINTER(c_void_p), )
dll.BVTHead_GetMountType.restype = c_int
dll.BVTHead_GetMountType.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_SetMountType.restype = c_int
dll.BVTHead_SetMountType.argtypes = (c_void_p, c_int, )
dll.BVTHead_GetMountSide.restype = c_int
dll.BVTHead_GetMountSide.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_SetMountSide.restype = c_int
dll.BVTHead_SetMountSide.argtypes = (c_void_p, c_int, )
dll.BVTHead_GetMRUTimeOffset.restype = c_int
dll.BVTHead_GetMRUTimeOffset.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_SetMRUTimeOffset.restype = c_int
dll.BVTHead_SetMRUTimeOffset.argtypes = (c_void_p, c_int, )
dll.BVTHead_SetPoleGPSBearing.restype = c_int
dll.BVTHead_SetPoleGPSBearing.argtypes = (c_void_p, c_float, c_float, )
dll.BVTHead_GetPoleGPSBearing.restype = c_int
dll.BVTHead_GetPoleGPSBearing.argtypes = (c_void_p, POINTER(c_float), POINTER(c_float), )
dll.BVTHead_GetPoleLandmarkBearing.restype = c_float
dll.BVTHead_GetPoleLandmarkBearing.argtypes = (c_void_p, )
dll.BVTHead_SetPoleLandmarkBearing.restype = c_int
dll.BVTHead_SetPoleLandmarkBearing.argtypes = (c_void_p, c_float, )
dll.BVTHead_GetHeadingOffset.restype = c_int
dll.BVTHead_GetHeadingOffset.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTHead_SetHeadingOffset.restype = c_int
dll.BVTHead_SetHeadingOffset.argtypes = (c_void_p, c_float, )
dll.BVTHead_SetPanTiltAttributes.restype = c_int
dll.BVTHead_SetPanTiltAttributes.argtypes = (c_void_p, c_char_p, c_char_p, c_float, )
dll.BVTHead_GetPanTiltManufacturer.restype = c_int
dll.BVTHead_GetPanTiltManufacturer.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTHead_GetPanTiltManufacturerLength.restype = c_int
dll.BVTHead_GetPanTiltManufacturerLength.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_GetPanTiltModel.restype = c_int
dll.BVTHead_GetPanTiltModel.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTHead_GetPanTiltModelLength.restype = c_int
dll.BVTHead_GetPanTiltModelLength.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTHead_GetPanTiltElbowOffset.restype = c_int
dll.BVTHead_GetPanTiltElbowOffset.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTHead_GetPanTiltMountOffsets.restype = c_int
dll.BVTHead_GetPanTiltMountOffsets.argtypes = (c_void_p, POINTER(c_float), POINTER(c_float), POINTER(c_float), POINTER(c_float), POINTER(c_int), )
dll.BVTHead_SetPanTiltMountOffsets.restype = c_int
dll.BVTHead_SetPanTiltMountOffsets.argtypes = (c_void_p, c_float, c_float, c_float, c_float, c_int, )


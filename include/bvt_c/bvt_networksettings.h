/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTNETWORKSETTINGS_H__
#define __BVTNETWORKSETTINGS_H__

#include <bvt_c/bvt_retval.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && _MSC_VER >= 1310
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT __declspec(deprecated("This will be removed in a future version of the BlueView SDK"))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
#	else
#		define BVTSDK_EXPORT
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && ((__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)))
#		define BVTSDK_EXPORT_OBSOLETE BVT_EXPORT __attribute__((__deprecated__("This will be removed in a future version of the BlueView SDK")))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** @file
 * @defgroup BVTNetworkSettings BVTNetworkSettings
 * @brief
 * Various network-related parameters.
 * \warning You should not modify these settings unless you carefully record the new
 * parameters!
 * \note A sonar will typically only apply these
 * parameters once per power cycle, at boot.
 * @{
*/

/** Opaque type for BVTNetworkSettings object instances */
typedef struct BVTOpaqueNetworkSettings* BVTNetworkSettings;

/** Destroy a BVTNetworkSettings object
 *  @param obj Object pointer
*/
BVTSDK_EXPORT void BVTNetworkSettings_Destroy(BVTNetworkSettings obj);

enum BVTAddressMode
{
	BVT_ADDRESSMODE_DHCP_CLIENT = 1,
	BVT_ADDRESSMODE_STATIC = 2
};

/** Set the method by which the sonar obtains an IP address. 
 * @param self Object pointer
 * @param mode the method by which the sonar obtains an IP address. 
 */
BVTSDK_EXPORT RetVal BVTNetworkSettings_SetAddressMode(BVTNetworkSettings self, int mode);

/** Get the method by which the sonar obtains an IP address.
 * @param self Object pointer
 * @param mode the method by which the sonar obtains an IP address. 
 * @returns mode

 */
BVTSDK_EXPORT RetVal BVTNetworkSettings_GetAddressMode(BVTNetworkSettings self, int* mode);

/** Set the sonar's static IP address.
 * \attention Requires BVTNetworkSettings_AddressMode to be STATIC
 * @param self Object pointer
 * @param address A valid IPv4 address that the sonar will use. 
 */
BVTSDK_EXPORT RetVal BVTNetworkSettings_SetIPv4Address(BVTNetworkSettings self, const char* address);

/** Get the sonar's IP address.
 * @param self Object pointer
 * @param address A buffer to hold the sonar's IPv4 address. 
 * @returns address

 * @param addressLength Size in bytes of the address buffer 
 */
BVTSDK_EXPORT RetVal BVTNetworkSettings_GetIPv4Address(BVTNetworkSettings self, char* address, int addressLength);

/** Set the sonar's static subnet mask.
 * \attention Requires BVTNetworkSettings_AddressMode to be STATIC
 * @param self Object pointer
 * @param mask A valid IPv4 subnet mask that the sonar will use. 
 */
BVTSDK_EXPORT RetVal BVTNetworkSettings_SetSubnetMask(BVTNetworkSettings self, const char* mask);

/** Get the sonar's subnet mask address.
 * @param self Object pointer
 * @param mask A buffer to hold the sonar's subnet mask. 
 * @returns mask

 * @param maskLength Size in bytes of the mask buffer 
 */
BVTSDK_EXPORT RetVal BVTNetworkSettings_GetSubnetMask(BVTNetworkSettings self, char* mask, int maskLength);

/** Set the sonar's gateway.
 * \attention Requires BVTNetworkSettings_AddressMode to be STATIC
 * @param self Object pointer
 * @param gateway A valid IPv4 gateway address that the sonar will use. 
 */
BVTSDK_EXPORT RetVal BVTNetworkSettings_SetGateway(BVTNetworkSettings self, const char* gateway);

/** Get the sonar's gateway address.
 * @param self Object pointer
 * @param gateway A buffer to hold the sonar's gateway address. 
 * @returns gateway

 * @param gatewayLength Size in bytes of the gateway buffer 
 */
BVTSDK_EXPORT RetVal BVTNetworkSettings_GetGateway(BVTNetworkSettings self, char* gateway, int gatewayLength);

/** Set this to true if you want the sonar to launch a DHCP server at boot.
 * \warning You must not set this to true if the BVTNetworkSettings_AddressMode is DHCP_CLIENT
 * @param self Object pointer
 * @param enable Set to true if the sonar should act as a DHCP server. 
 */
BVTSDK_EXPORT RetVal BVTNetworkSettings_SetDHCPServerEnabled(BVTNetworkSettings self, int enable);

/** If true the sonar will launch a DHCP server at boot.
 * @param self Object pointer
 * @param is_enabled Tue if the sonar will act as a DHCP server. 
 * @returns is_enabled

 */
BVTSDK_EXPORT RetVal BVTNetworkSettings_GetDHCPServerEnabled(BVTNetworkSettings self, int* is_enabled);

/** Set the sonar's IPv4 multicast address.
 * \attention This is experimental
 * \see GetPingMulticast
 * @param self Object pointer
 * @param address The sonar's IPv4 multicast address. 
 */
BVTSDK_EXPORT RetVal BVTNetworkSettings_SetIPv4MulticastAddress(BVTNetworkSettings self, const char* address);

/** Get the sonar's IPv4 multicast address.
 * \attention This is experimental
 * \see GetPingMulticast
 * @param self Object pointer
 * @param address A buffer to hold the sonar's IPv4 multicast address. 
 * @returns address

 * @param addressLength Size in bytes of the address buffer 
 */
BVTSDK_EXPORT RetVal BVTNetworkSettings_GetIPv4MulticastAddress(BVTNetworkSettings self, char* address, int addressLength);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif

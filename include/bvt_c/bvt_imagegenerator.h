/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTIMAGEGENERATOR_H__
#define __BVTIMAGEGENERATOR_H__

#include <bvt_c/bvt_retval.h>
#include <bvt_c/bvt_head.h>
#include <bvt_c/bvt_ping.h>
#include <bvt_c/bvt_magimage.h>
#include <bvt_c/bvt_rangeprofile.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && _MSC_VER >= 1310
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT __declspec(deprecated("This will be removed in a future version of the BlueView SDK"))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
#	else
#		define BVTSDK_EXPORT
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && ((__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)))
#		define BVTSDK_EXPORT_OBSOLETE BVT_EXPORT __attribute__((__deprecated__("This will be removed in a future version of the BlueView SDK")))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** @file
 * @defgroup BVTImageGenerator BVTImageGenerator
 * @brief
 * An ImageGenerator processes Ping data to create images.  
 * Thread-safety: none.
 * @{
*/

/** Opaque type for BVTImageGenerator object instances */
typedef struct BVTOpaqueImageGenerator* BVTImageGenerator;

/** Create a BVTImageGenerator object */
BVTSDK_EXPORT BVTImageGenerator BVTImageGenerator_Create();
/** Destroy a BVTImageGenerator object
 *  @param obj Object pointer
*/
BVTSDK_EXPORT void BVTImageGenerator_Destroy(BVTImageGenerator obj);

/** Set the Head and perform expensive initialization.
 * @see BVTImageGenerator_IsValidForHead
 * @param self Object pointer
 * @param head The Head from which subsequent pings will be passed 
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetHead(BVTImageGenerator self, const BVTHead head);

/** Return true if the specified Head is associated with this instance. If false, you must
 * call BVTImageGenerator_SetHead.
 * @see BVTImageGenerator_SetHead
 * @param self Object pointer
 * @param head The Head to check 
 * @param is_valid True if the specified Head is valid for this instance. 
 * @returns is_valid

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_IsValidForHead(BVTImageGenerator self, const BVTHead head, int* is_valid);

/** Set the image processing resolution. The RES_AUTO setting is highly
 * recommended, as it adapts via a formula according to the stop range,
 * whereas the other ranges are fixed values, and should only be used
 * in specialized cases, such as requesting high resolution for longer
 * distances (which will increase the processing time required to 
 * create the image). R-Theta images may use either this function or
 * BVTImageGenerator_SetRangeResolution(), depending on the degree of control required.
 * @param self Object pointer
 * @param resolutionPolicy Resolution constant (IMAGERES_*)
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetImageResolutionPolicy(BVTImageGenerator self, int resolutionPolicy);

/** Return the algorithm used to calculate image resolution.
 * @param self Object pointer
 * @param resolutionPolicy Resolution constant (IMAGERES_*) 
 * @returns resolutionPolicy

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetImageResolutionPolicy(BVTImageGenerator self, int* resolutionPolicy);

/** Return the filter flags.  As of this version, if more than one flag is set, only the lowest-valued flag is used.
 * @param self Object pointer
 * @param flags The image filter flags in use. (Bit field) 
 * @returns flags

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetImageFilterFlags(BVTImageGenerator self, int* flags);

/** Set the filter flags. As of this version, if more than one flag is set, only the lowest-valued flag is used.
 * @param self Object pointer
 * @param flags Image filter flags to use (bit field) 
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetImageFilterFlags(BVTImageGenerator self, int flags);

/** @see BVTImageGenerator_SetRangeResolution
 * @param self Object pointer
 * @param resolution_in_meters Range resolution, in meters 
 * @returns resolution_in_meters

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetRangeResolution(BVTImageGenerator self, float* resolution_in_meters);

/** Requests a range resolution for R-Theta images. Also affects the
 * range resolution for RangeProfile. Note that the exact range resolution
 * may not be available, and the closest resolution will be set. The
 * actual resolution can be obtained by querying the returned image
 * or RangeProfile object.
 * @param self Object pointer
 * @param resolution_in_meters Range resolution, in meters 
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetRangeResolution(BVTImageGenerator self, float resolution_in_meters);

/** @see BVTHead_SetRangeProfileThreshold
 * @param self Object pointer
 * @param threshold minimum detection threshold 
 * @returns threshold

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetRangeProfileIntensityThreshold(BVTImageGenerator self, unsigned short* threshold);

/** @see BVTHead_SetRangeProfileThreshold
 * @param self Object pointer
 * @param threshold minimum detection threshold 
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetRangeProfileIntensityThreshold(BVTImageGenerator self, unsigned short threshold);

/** @see BVTHead_SetTargetStartRange
 * @param self Object pointer
 * @param start_range minimum range to detect 
 * @returns start_range

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetRangeProfileStartRange(BVTImageGenerator self, float* start_range);

/** @see BVTHead_SetTargetStartRange
 * @param self Object pointer
 * @param start_range minimum detection to detect 
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetRangeProfileStartRange(BVTImageGenerator self, float start_range);

/** Set the preferred XY image size. Note that the aspect ratio of the image
 * remains fixed (as a function of start and stop range). If you specify non-zero 
 * parameters to this method that violate the aspect ratio, the image width will be 
 * adjusted.
 * This is a helper function to accompany the BVTImageGenerator_GetImageXY() function.
 * @param self Object pointer
 * @param width The requested width, or 0 for no change 
 * @param height The requested height, or 0 for no change 
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetXYImageSize(BVTImageGenerator self, int width, int height);

/** Set the RTheta image width
 * This is a helper function to accompany the BVTImageGenerator_GetImageRTheta() function.
 * @param self Object pointer
 * @param width The requested width 
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetRThetaImageWidth(BVTImageGenerator self, int width);

/** Get the RTheta image width
 * This is a helper function to accompany the BVTImageGenerator_GetImageRTheta() function.
 * @param self Object pointer
 * @param width The requested width 
 * @returns width

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetRThetaImageWidth(BVTImageGenerator self, int* width);

/** Retrieve an XY-format image of this ping, according to the parameters set
 * in the head used to get this ping. Use BVTHead_SetImageSizeXY() to set the size for this image.
 * See Head and MagImage documentation for more details.
 * @param self Object pointer
 * @param ping The Ping to generate image from. 
 * @param img Output XY image 
 * @returns img

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetImageXY(BVTImageGenerator self, const BVTPing ping, BVTMagImage* img);

/** Retrieve an R-Theta format image of this ping, according to the parameters set
 * in the head used to get this ping. Use BVTHead_SetImageWidthRTheta() to set the size for this image.
 * See Head and MagImage documentation for more details.
 * @param self Object pointer
 * @param ping The Ping to generate image from. 
 * @param img Output R-Theta image 
 * @returns img

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetImageRTheta(BVTImageGenerator self, const BVTPing ping, BVTMagImage* img);

/** Creates and returns RangeProfile for the ping.
 * @warning This function will fail on a sonar with old firmware, or a file recorded from a sonar with old firmware.
 * @param self Object pointer
 * @param ping The Ping to generate image from. 
 * @param ranges The created RangeProfile 
 * @returns ranges

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetRangeProfile(BVTImageGenerator self, const BVTPing ping, BVTRangeProfile* ranges);

/** Returns the RangeProfile for a ping with RangeProfile created on the sonar, not the client.
 * @note Returns an error if this ping does not have a stored RangeProfile.
 * @param self Object pointer
 * @param ping The Ping to generate image from. 
 * @param ranges The created RangeProfile 
 * @returns ranges

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetStoredRangeProfile(BVTImageGenerator self, const BVTPing ping, BVTRangeProfile* ranges);

/** The clipping threshold specifies the percentage of dynamic range above which data will be nulled. 
 * The value must be set between 0.0 and 1.0. A value of 0.0 indicates 
 * that all data should be nulled (everything clips), while a value of 1.0 effectively 
 * disables any high-side thresholding. Clipped data is not processed, saving CPU cycles, 
 * so the clipping threshold may serve as a performance tuning parameter.
 * @param self Object pointer
 * @param threshold The upper bound threshold as a percentage of dynamic range for valid data from the A/D 
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetClippingThreshold(BVTImageGenerator self, float threshold);

/** Returns the floating point value of the clipping threshold. 
 * This threshold represents a percentage of dynamic range above which data is considered 
 * clipped and subsequently nulled. 
 * @param self Object pointer
 * @param threshold Lower bound threshold value from 0 to 1 
 * @returns threshold

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetClippingThreshold(BVTImageGenerator self, float* threshold);

/** The noise threshold specifies the percentage of dynamic range below which data will be nulled. 
 * The value must be set between 0.0 and 1.0. A value of 0.0 indicates that no data should be nulled, 
 * effectively disabling low-side thresholding, while a value of 1.0 will force all data to be nulled. 
 * Data that is not above the noise threshold is not processed, saving CPU cycles, so the noise 
 * threshold may serve as a performance tuning parameter.
 * @param self Object pointer
 * @param threshold The lower bound threshold as a percentage of dynamic range for valid data from the A/D 
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetNoiseThreshold(BVTImageGenerator self, float threshold);

/** Returns the floating point value of the noise threshold. This threshold 
 * represents a percentage of dynamic range below which data is considered 
 * to be noise and subsequently nulled.
 * @param self Object pointer
 * @param threshold The noise threshold in use. 
 * @returns threshold

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetNoiseThreshold(BVTImageGenerator self, float* threshold);

#define BVTIMAGEGENERATOR_SOUND_SPEED_OVERRIDE_OFF	(int)(0)

/** When the GetImage functions are called, ignore the sound speed stored in the ping and 
 * use this value instead.  
 * Use the default BVTIMAGEGENERATOR_SOUND_SPEED_OVERRIDE_OFF to use the ping's stored sound speed.  
 * @param self Object pointer
 * @param meters_per_second The sound speed in meters per second 
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetSoundSpeedOverride(BVTImageGenerator self, int meters_per_second);

/** 
 * @param self Object pointer
 * @param meters_per_second The sound speed in meters per second 
 * @returns meters_per_second

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetSoundSpeedOverride(BVTImageGenerator self, int* meters_per_second);

/** Do not use this. Experimental.
 * @param self Object pointer
 * @param algorithm Undocumented. 
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetMapAlgorithm(BVTImageGenerator self, int algorithm);

/** Do not use this. Experimental.
 * @param self Object pointer
 * @param algorithm Undocumented. 
 * @returns algorithm

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetMapAlgorithm(BVTImageGenerator self, int* algorithm);

/** @warning This function will fail on a sonar with old firmware, or a file recorded from a sonar with old firmware.
 * @param self Object pointer
 * @param ping The ping to modify. 
 * @returns ping

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_CreateStoredRangeProfileAndReplaceSignal(BVTImageGenerator self, BVTPing ping);

/** Retrieve the current overlap blending parameters.
 * @param self Object pointer
 * @param nearRangeBeamToFavor Beam to favor at the sonar min range. 0 is highest freq., 128 is lowest freq. 
 * @returns nearRangeBeamToFavor

 * @param farRangeBeamToFavor Beam to favor at the sonar max range. 
 * @returns farRangeBeamToFavor

 * @param rangeSkewExponent Controls the rate of change between nearRangeBeamToFavor and farRangeBeamToFavor w.r.t. pixel range, 0<e<1 ==> Move to far range beams quickly, 1<e<inf ==> Move to far range beams slowly 
 * @returns rangeSkewExponent

 * @param beamWeightExponent Controls relative weights of beams close to and far from the beam to favor. e=0 ==> All beams weighted equally. As e increases, proximity to beam to favor becomes a greater factor in weighting 
 * @returns beamWeightExponent

 */
BVTSDK_EXPORT RetVal BVTImageGenerator_GetSectorOverlapBlendingParams(BVTImageGenerator self, unsigned int* nearRangeBeamToFavor, unsigned int* farRangeBeamToFavor, float* rangeSkewExponent, float* beamWeightExponent);

/** Set the overlap blending parameters. 
 * @param self Object pointer
 * @param nearRangeBeamToFavor Beam to favor at the sonar min range. 0 is highest freq., 128 is lowest freq. 
 * @param farRangeBeamToFavor Beam to favor at the sonar max range. 
 * @param rangeSkewExponent Controls the rate of change between nearRangeBeamToFavor and farRangeBeamToFavor w.r.t.pixel range, 0<e<1 == > Move to far range beams quickly, 1<e<inf == > Move to far range beams slowly 
 * @param beamWeightExponent Controls relative weights of beams close to and far from the beam to favor.e = 0 == > All beams weighted equally.As e increases, proximity to beam to favor becomes a greater factor in weighting 
 */
BVTSDK_EXPORT RetVal BVTImageGenerator_SetSectorOverlapBlendingParams(BVTImageGenerator self, unsigned int nearRangeBeamToFavor, unsigned int farRangeBeamToFavor, float rangeSkewExponent, float beamWeightExponent);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif

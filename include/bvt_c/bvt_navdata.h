/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTNAVDATA_H__
#define __BVTNAVDATA_H__

#include <bvt_c/bvt_retval.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && _MSC_VER >= 1310
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT __declspec(deprecated("This will be removed in a future version of the BlueView SDK"))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
#	else
#		define BVTSDK_EXPORT
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && ((__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)))
#		define BVTSDK_EXPORT_OBSOLETE BVT_EXPORT __attribute__((__deprecated__("This will be removed in a future version of the BlueView SDK")))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** @file
 * @defgroup BVTNavData BVTNavData
 * @brief
 * NavData contains various types of user-accessible navigation parameter, which
 * can be saved to and retrieved from a sonar file on a per ping basis.
 * The NavData objects can be created and destroyed as needed. When the
 * ping functions are called to get or put the data, the data is copied.
 * This allows NavData objects to be pre-allocated and filled from various
 * instrument sources. It also allows the data to be copied from one
 * NavData object to the other.
 * NOTE: NavData changes will only be saved to a sonar of type FILE. 
 * @{
*/

/** Opaque type for BVTNavData object instances */
typedef struct BVTOpaqueNavData* BVTNavData;

/** Create a BVTNavData object */
BVTSDK_EXPORT BVTNavData BVTNavData_Create();
/** Destroy a BVTNavData object
 *  @param obj Object pointer
*/
BVTSDK_EXPORT void BVTNavData_Destroy(BVTNavData obj);

/** Clones the data from the passed NavData object to this object. Both objects
 * must have already been created.
 * @param self Object pointer
 * @param navdata_to_clone existing NavData object to copy from 
 * @deprecated This function will be removed in a future version of the SDK

 */
BVTSDK_EXPORT RetVal BVTNavData_Clone(BVTNavData self, const BVTNavData navdata_to_clone);

/** Clones the data from the passed NavData object to this object. Both objects
 * must have already been created.
 * @param self Object pointer
 * @param navdata_to_clone existing NavData object to copy from 
 */
BVTSDK_EXPORT RetVal BVTNavData_CloneFrom(BVTNavData self, const BVTNavData navdata_to_clone);

/** Clears all fields in the NavData object so that the object may
 * be reused. Following a call to this method, BVTNavData_IsEmpty() returns
 * true.
 * @param self Object pointer
 */
BVTSDK_EXPORT RetVal BVTNavData_Clear(BVTNavData self);

/** Returns true(1) if the NavData object contains no valid data.
 * @param self Object pointer
 * @param empty true if this NavData object is empty
 * @returns empty

 */
BVTSDK_EXPORT RetVal BVTNavData_IsEmpty(BVTNavData self, int* empty);

/** Combines the fields of two NavData objects according to the following rules:
 * 1) If a field is populated in one object and empty in the other, the value from the populated object is kept
 * 2) If a field is full in both objects, the value with the more
 * recent timestamp is kept
 * 3) If a field is empty in both objects, it remains empty
 * @param self Object pointer
 * @param other The source NavData to merge into this NavData 
 */
BVTSDK_EXPORT RetVal BVTNavData_Merge(BVTNavData self, const BVTNavData other);

/** Clears all fields whose time of receipt is older than the value specified by timestamp (as provided by the system clock). Returns the number of valid fields left.
 * @param self Object pointer
 * @param timestamp The absolute timestamp, in seconds, for data to be considered stale
 * @param remainingFieldCount the number of remaining valid fields after pruning stale fields
 * @returns remainingFieldCount

 */
BVTSDK_EXPORT RetVal BVTNavData_ClearStaleFields(BVTNavData self, double timestamp, int* remainingFieldCount);

/** A single NavData object may contain data that was acquired over some length of time. This
 * function allows the user to determine what that length is.
 * @param self Object pointer
 * @param start The Unix timestamp representing the earliest data contained in the object 
 * @returns start

 * @param stop The Unix timestamp representing the latest data contained in the object 
 * @returns stop

 */
BVTSDK_EXPORT RetVal BVTNavData_GetTimespan(BVTNavData self, double* start, double* stop);

/** Returns the latitude. If no latitude was stored, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param degrees latitude in degrees 
 * @returns degrees

 */
BVTSDK_EXPORT RetVal BVTNavData_GetLatitude(BVTNavData self, double* degrees);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds 
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetLatitudeTimestamp(BVTNavData self, double* timestamp);

/** Stores the latitude, as a signed floating point number of degrees.
 * Latitudes in the Southern hemisphere are expressed as negative numbers.
 * @param self Object pointer
 * @param degrees latitude in degrees 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetLatitude(BVTNavData self, double degrees);

/** Returns the longitude. If no longitude was stored, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param degrees longitude in degrees 
 * @returns degrees

 */
BVTSDK_EXPORT RetVal BVTNavData_GetLongitude(BVTNavData self, double* degrees);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetLongitudeTimestamp(BVTNavData self, double* timestamp);

/** Stores the longitude, as a signed floating point number of degrees.
 * Longitudes in the Western hemisphere are expressed as negative numbers.
 * @param self Object pointer
 * @param degrees longitude in degrees 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetLongitude(BVTNavData self, double degrees);

/** Returns the estimated horizontal error (see next function for details). 
 * If none was stored, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param error_meters potential error distance, in meters 
 * @returns error_meters

 */
BVTSDK_EXPORT RetVal BVTNavData_GetHorizontalPrecisionError(BVTNavData self, float* error_meters);

/** )
 * Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetHorizontalPrecisionErrorTimestamp(BVTNavData self, double* timestamp);

/** Stores the estimated possible horizontal error. This is primarily (but not exclusively)
 * intended for GPS systems, where there may be some doubt as to the
 * quality of the position fix. HDOP is common, but not used here, as
 * that is a unitless measure and varies between different manufacturers and models. <br>
 * The idea is to use whatever calculations are appropriate for the 
 * local navigation system, and store a possible error value in meters.
 * Some GPS units will attempt to give this directly. (for example,
 * the HPE field in the PGRME sentence, supplied by some Garmin units.)
 * In the case of large errors, or old data, it may be best to either
 * not store a position, or not store new data. (also consider using
 * the NavData time parameter to store the time of last fix, which
 * can then be compared to the ping time when the data is read back to
 * determine the age of the GPS reading.)
 * @param self Object pointer
 * @param error_meters potential error distance, in meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetHorizontalPrecisionError(BVTNavData self, float error_meters);

/** Returns the height above Mean Sea Level. If no value was stored for
 * this ping, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param meters_above_geoid height in meters 
 * @returns meters_above_geoid

 */
BVTSDK_EXPORT RetVal BVTNavData_GetHeight(BVTNavData self, float* meters_above_geoid);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetHeightTimestamp(BVTNavData self, double* timestamp);

/** Store the height above Mean Sea Level (usually the EGM96 geoid)
 * @param self Object pointer
 * @param meters_above_geoid height in meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetHeight(BVTNavData self, float meters_above_geoid);

/** Returns the estimated vertical error (see next function for details). 
 * If none was stored, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param error_meters potential error distance, in meters 
 * @returns error_meters

 */
BVTSDK_EXPORT RetVal BVTNavData_GetVerticalPrecisionError(BVTNavData self, float* error_meters);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetVerticalPrecisionErrorTimestamp(BVTNavData self, double* timestamp);

/** Stores the estimated possible vertical error (height) above 
 * Mean Sea Level (EGM96 geoid).  For other notes, see the functions
 * or Horizontal Precision Error, above.
 * @param self Object pointer
 * @param error_meters potential error distance, in meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetVerticalPrecisionError(BVTNavData self, float error_meters);

/** Returns the depth. If no value was stored for this ping, returns
 * BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param meters_below_surface depth in floating point meters 
 * @returns meters_below_surface

 */
BVTSDK_EXPORT RetVal BVTNavData_GetDepth(BVTNavData self, float* meters_below_surface);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds 
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetDepthTimestamp(BVTNavData self, double* timestamp);

/** Store the depth.
 * @param self Object pointer
 * @param meters_below_surface depth in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetDepth(BVTNavData self, float meters_below_surface);

/** Returns the altitude. If no value was stored for this ping, returns
 * BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param meters_above_bottom altitude in floating point meters 
 * @returns meters_above_bottom

 */
BVTSDK_EXPORT RetVal BVTNavData_GetAltitude(BVTNavData self, float* meters_above_bottom);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetAltitudeTimestamp(BVTNavData self, double* timestamp);

/** Store the altitude.
 * @param self Object pointer
 * @param meters_above_bottom altitude in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetAltitude(BVTNavData self, float meters_above_bottom);

/** Returns the heading relative to True North. If no value was stored
 * for this ping, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param degrees_true True heading, in degrees 
 * @returns degrees_true

 */
BVTSDK_EXPORT RetVal BVTNavData_GetHeading(BVTNavData self, float* degrees_true);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetHeadingTimestamp(BVTNavData self, double* timestamp);

/** Store the heading relative to True North.
 * @param self Object pointer
 * @param degrees_true True heading, in degrees 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetHeading(BVTNavData self, float degrees_true);

/** Returns the velocity along the heading. If no value was stored
 * for this ping, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param meters_per_second velocity, in meters per second 
 * @returns meters_per_second

 */
BVTSDK_EXPORT RetVal BVTNavData_GetHeadingVelocity(BVTNavData self, float* meters_per_second);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetHeadingVelocityTimestamp(BVTNavData self, double* timestamp);

/** Store the velocity along the heading.
 * @param self Object pointer
 * @param meters_per_second velocity, in meters per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetHeadingVelocity(BVTNavData self, float meters_per_second);

/** Returns the course over ground (true). If no value was stored for
 * this ping, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param degrees_true course over ground, true, in degrees 
 * @returns degrees_true

 */
BVTSDK_EXPORT RetVal BVTNavData_GetCourseOverGround(BVTNavData self, float* degrees_true);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetCourseOverGroundTimestamp(BVTNavData self, double* timestamp);

/** Store the course over ground, true.
 * @param self Object pointer
 * @param degrees_true course over ground, true, in degrees 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetCourseOverGround(BVTNavData self, float degrees_true);

/** Returns the speed over ground. If no value was stored for this ping,
 * returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param meters_per_second speed over ground, in meters per second 
 * @returns meters_per_second

 */
BVTSDK_EXPORT RetVal BVTNavData_GetSpeedOverGround(BVTNavData self, float* meters_per_second);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetSpeedOverGroundTimestamp(BVTNavData self, double* timestamp);

/** Store the speed over ground.
 * @param self Object pointer
 * @param meters_per_second speed over ground, in meters per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetSpeedOverGround(BVTNavData self, float meters_per_second);

/** Get the pitch angle. If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param degrees_bow_up pitch angle, in floating point degrees, bow up is positive  
 * @returns degrees_bow_up

 */
BVTSDK_EXPORT RetVal BVTNavData_GetPitchAngle(BVTNavData self, float* degrees_bow_up);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetPitchAngleTimestamp(BVTNavData self, double* timestamp);

/** Store the pitch angle.
 * @param self Object pointer
 * @param degrees_bow_up pitch angle, in floating point degrees, bow up is positive  
 */
BVTSDK_EXPORT RetVal BVTNavData_SetPitchAngle(BVTNavData self, float degrees_bow_up);

/** Get the roll angle. If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param degrees_port_up roll angle, in floating point degrees, port side up is positive  
 * @returns degrees_port_up

 */
BVTSDK_EXPORT RetVal BVTNavData_GetRollAngle(BVTNavData self, float* degrees_port_up);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetRollAngleTimestamp(BVTNavData self, double* timestamp);

/** Store the roll angle.
 * @param self Object pointer
 * @param degrees_port_up roll angle, in floating point degrees, port side up is positive  
 */
BVTSDK_EXPORT RetVal BVTNavData_SetRollAngle(BVTNavData self, float degrees_port_up);

/** Get the roll angle (but see notes with BVTNavData_SetYawAngle() ). If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param degrees_bow_to_starboard yaw angle, in floating point degrees 
 * @returns degrees_bow_to_starboard

 */
BVTSDK_EXPORT RetVal BVTNavData_GetYawAngle(BVTNavData self, float* degrees_bow_to_starboard);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetYawAngleTimestamp(BVTNavData self, double* timestamp);

/** Store the yaw angle. <br>
 * NOTE: This is NOT the same as the Heading field. Heading is for the
 * normal navigation use of Heading, often from a compass. This field is
 * intended to store raw data from other research instruments, in case
 * you need another storage spot. To keep everyone using the fields the
 * same way so that files can be interchanged, please use BVTNavData_SetHeading
 * for the normal heading, and BVTNavData_SetYawAngle() only for special uses.
 * @param self Object pointer
 * @param degrees_bow_to_starboard yaw angle, in floating point degrees, to starboard is positive  
 */
BVTSDK_EXPORT RetVal BVTNavData_SetYawAngle(BVTNavData self, float degrees_bow_to_starboard);

/** Returns the rate of pitch change.
 * If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param degrees_per_second rate of pitch change in degrees per second 
 * @returns degrees_per_second

 */
BVTSDK_EXPORT RetVal BVTNavData_GetPitchRate(BVTNavData self, float* degrees_per_second);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetPitchRateTimestamp(BVTNavData self, double* timestamp);

/** Store the the rate of pitch change.
 * @param self Object pointer
 * @param degrees_per_second rate of pitch change in degrees per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetPitchRate(BVTNavData self, float degrees_per_second);

/** Returns the rate of roll change.
 * If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param degrees_per_second rate of roll change in degrees per second 
 * @returns degrees_per_second

 */
BVTSDK_EXPORT RetVal BVTNavData_GetRollRate(BVTNavData self, float* degrees_per_second);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetRollRateTimestamp(BVTNavData self, double* timestamp);

/** Store the the rate of change in roll.
 * @param self Object pointer
 * @param degrees_per_second rate of roll change in floating point degrees per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetRollRate(BVTNavData self, float degrees_per_second);

/** Returns the rate of change in yaw (heading).  If no value was stored for this ping,
 * returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param degrees_per_second rate of yaw change in floating point degrees per second 
 * @returns degrees_per_second

 */
BVTSDK_EXPORT RetVal BVTNavData_GetYawRate(BVTNavData self, float* degrees_per_second);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetYawRateTimestamp(BVTNavData self, double* timestamp);

/** Store the rate of change in yaw (heading).
 * @param self Object pointer
 * @param degrees_per_second rate of yaw change in floating point degrees per second 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetYawRate(BVTNavData self, float degrees_per_second);

/** Gets the stored acceleration along the X axis. If no value was stored for this ping,
 * returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param accel_mg acceleration along X axis, in milli-g 
 * @returns accel_mg

 */
BVTSDK_EXPORT RetVal BVTNavData_GetAccelerationX(BVTNavData self, float* accel_mg);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetAccelerationXTimestamp(BVTNavData self, double* timestamp);

/** Sets the stored acceleration along the X axis. Intended to store
 * raw values of accelerometers.
 * @param self Object pointer
 * @param accel_mg acceleration along X axis, in milli-g 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetAccelerationX(BVTNavData self, float accel_mg);

/** Gets the stored acceleration along the Y axis. If no value was stored for this ping,
 * returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param accel_mg acceleration along Y axis, in milli-g 
 * @returns accel_mg

 */
BVTSDK_EXPORT RetVal BVTNavData_GetAccelerationY(BVTNavData self, float* accel_mg);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetAccelerationYTimestamp(BVTNavData self, double* timestamp);

/** Sets the stored acceleration along the Y axis. Intended to store
 * raw values of accelerometers.
 * @param self Object pointer
 * @param accel_mg acceleration along Y axis, in milli-g 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetAccelerationY(BVTNavData self, float accel_mg);

/** Gets the stored acceleration along the Z axis. If no value was stored for this ping,
 * returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param accel_mg acceleration along Z axis, in milli-g 
 * @returns accel_mg

 */
BVTSDK_EXPORT RetVal BVTNavData_GetAccelerationZ(BVTNavData self, float* accel_mg);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetAccelerationZTimestamp(BVTNavData self, double* timestamp);

/** Sets the stored acceleration along the Z axis. Intended to store
 * raw values of accelerometers.
 * @param self Object pointer
 * @param accel_mg acceleration along Z axis, in milli-g 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetAccelerationZ(BVTNavData self, float accel_mg);

/** Returns the offset, to the north, from a user-defined fixed point.
 * If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param meters offset to the north, in floating point meters 
 * @returns meters

 */
BVTSDK_EXPORT RetVal BVTNavData_GetOffsetNorth(BVTNavData self, double* meters);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetOffsetNorthTimestamp(BVTNavData self, double* timestamp);

/** Store the offset from a user-defined fixed point.
 * @param self Object pointer
 * @param meters offset to the north, in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetOffsetNorth(BVTNavData self, double meters);

/** Returns the offset, to the east, from a user-defined fixed point.
 * If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param meters offset to the east, in floating point meters 
 * @returns meters

 */
BVTSDK_EXPORT RetVal BVTNavData_GetOffsetEast(BVTNavData self, double* meters);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetOffsetEastTimestamp(BVTNavData self, double* timestamp);

/** Store the offset from a user-defined fixed point.
 * @param self Object pointer
 * @param meters offset to the east, in floating point meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetOffsetEast(BVTNavData self, double meters);

/** Gets a flag value which indicates if the East and North offset values
 * are from the stored Latitude and Longitude. (see more below...)
 * If no value was stored for this ping, returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param is_true either 1 or 0, to indicate true or false, respectively 
 * @returns is_true

 */
BVTSDK_EXPORT RetVal BVTNavData_GetOffsetIsFromLatLongFlag(BVTNavData self, int* is_true);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetOffsetIsFromLatLongFlagTimestamp(BVTNavData self, double* timestamp);

/** Sets a flag to indicate if the East and North offset values are from
 * the stored Latitude and Longitude. If so, then software reading the
 * file will know to adjust appropriately. If from some special location,
 * perhaps the UserNavString could be used to indicate the reference
 * point? If nothing is stored, then the value is assumed to be false.
 * @param self Object pointer
 * @param is_true either 1 or 0, to indicate true or false, respectively 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetOffsetIsFromLatLongFlag(BVTNavData self, int is_true);

/** Returns the stored user string, in null-terminated form. If no
 * string was stored, returns a null string.
 * @param self Object pointer
 * @param navString user-defined description string 
 * @returns navString

 * @param bufferLength length of navString buffer (in bytes)
 */
BVTSDK_EXPORT RetVal BVTNavData_GetUserNavString(BVTNavData self, char* navString, int bufferLength);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetUserNavStringTimestamp(BVTNavData self, double* timestamp);

/** Stores a user-defined string related to navigation. It is highly
 * recommended to store some identifier such that the data is
 * recognizable as you own. <br>
 * Examples of possible uses might be to store locations based on 
 * coordinate systems other than GPS, indicating information about
 * the use of the north and east offset parameters, additional fields
 * from a GPS receiver, or any other information which might change
 * dynamically.
 * @param self Object pointer
 * @param string_in string to be stored, null terminated, max length 80 chars 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetUserNavString(BVTNavData self, const char* string_in);

/** Returns the stored Source string, in null-terminated form. If no
 * string was stored, returns a null string.
 * @param self Object pointer
 * @param source_string The source string.  
 * @returns source_string

 * @param source_string_length The length in characters of the Source string. 
 */
BVTSDK_EXPORT RetVal BVTNavData_GetSource(BVTNavData self, char* source_string, int source_string_length);

/** Returns the length of the stored Source string.
 * @param self Object pointer
 * @param source_string_length The length in characters of the stored Source string. 
 * @returns source_string_length

 */
BVTSDK_EXPORT RetVal BVTNavData_GetSourceLength(BVTNavData self, int* source_string_length);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetSourceTimestamp(BVTNavData self, double* timestamp);

/** Stores a user-defined string which identifies the NavData source, 
 * e.g. "MRU", "GPS", "Compass". <br>.
 * @param self Object pointer
 * @param source_string string to be stored, null terminated, max length 80 chars 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetSource(BVTNavData self, const char* source_string);

/** Returns the stored UTM zone and grid number, in null-terminated form. If no
 * string was stored, returns a null string.
 * @param self Object pointer
 * @param zone output char buffer to hold zone string
 * @returns zone

 * @param bufLength total length of zone buffer (in bytes)
 */
BVTSDK_EXPORT RetVal BVTNavData_GetUTMLongitudeZone(BVTNavData self, char* zone, int bufLength);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetUTMLongitudeZoneTimestamp(BVTNavData self, double* timestamp);

/** Stores a string which identifies the UTM Zone and grid used as the
 * basis for Northing and Easting values. Zones range from [1,60], grids are lettered from
 * C-X not including O or I. Acceptable strings are of the form "1G" or "03F" or "54T".
 * @param self Object pointer
 * @param zone_string zone and grid to be stored, null terminated. Should be either 2 or 3 characters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetUTMLongitudeZone(BVTNavData self, const char* zone_string);

/** Stores a heave value, which is expected to be supplied by an MRU.
 * @param self Object pointer
 * @param heave_in_meters 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetHeave(BVTNavData self, float heave_in_meters);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetHeaveTimestamp(BVTNavData self, double* timestamp);

/** Gets the stored heave. If no value was stored for this ping,
 * returns BVT_NAV_NO_DATA.
 * @param self Object pointer
 * @param heave_in_meters Returns the heave in meters. 
 * @returns heave_in_meters

 */
BVTSDK_EXPORT RetVal BVTNavData_GetHeave(BVTNavData self, float* heave_in_meters);

/** Return the data's timestamp in seconds since 00:00:00 UTC, January 1, 1970 
 * NavData is timestamped using a standard UNIX time stamp. This is 
 * a similar value to that returned by the time() C standard library 
 * function. In fact, the only difference is the addition of fractional seconds.
 * @param self Object pointer
 * @param seconds navigation timestamp in seconds 
 * @returns seconds

 */
BVTSDK_EXPORT RetVal BVTNavData_GetNavTime(BVTNavData self, double* seconds);

/** Returns the Unix epoch time at which the field was set, including fractional seconds. 
 * If no data was stored, the returns zero.
 * This field may be compared to the output of BVTNavData_GetNavTime() to get a temporary estimate of the offset
 * between the system clock and the device clock. Note that this estimate will be subeject to 
 * drift.
 * NOTE: Timestamps are generated based on the value of the system clock at the time the
 * field was set. As such, they are subject to substantial error due to clock drift and
 * system latency and are in no way synchronized to any global standard. If such synchronization
 * is required, please use the NavTime field and consider using a PPS signal.
 * @param self Object pointer
 * @param timestamp timestamp in seconds
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTNavData_GetNavTimeTimestamp(BVTNavData self, double* timestamp);

/** Set the NavData's internal time stamp.  See BVTNavData_GetNavTime() for more information. 
 * @param self Object pointer
 * @param sec Timestamp in seconds since 00:00:00 UTC, January 1, 1970 
 */
BVTSDK_EXPORT RetVal BVTNavData_SetNavTime(BVTNavData self, double sec);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif

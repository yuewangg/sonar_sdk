/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTPING_H__
#define __BVTPING_H__

#include <bvt_c/bvt_retval.h>
#include <bvt_c/bvt_magimage.h>
#include <bvt_c/bvt_navdata.h>
#include <bvt_c/bvt_orientation.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && _MSC_VER >= 1310
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT __declspec(deprecated("This will be removed in a future version of the BlueView SDK"))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
#	else
#		define BVTSDK_EXPORT
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && ((__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)))
#		define BVTSDK_EXPORT_OBSOLETE BVT_EXPORT __attribute__((__deprecated__("This will be removed in a future version of the BlueView SDK")))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** @file
 * @defgroup BVTPing BVTPing
 * @brief
 * As its name implies, the Ping object represents the return from 
 * a single ping on a particular head. <br>
 * A ping is essentially a container for data. As such, after you get
 * a ping from the head and extract the data (or save it to a file),
 * it is necessary to destroy the ping object to free up memory. <br>
 * Each ping may also store navigation data to indicate the position
 * and orientation of the vehicle at the time of the ping. <br>
 * Each ping may have a video frame associated with it, and saved in
 * the same file. These images are typically from a video camera
 * mounted near the sonar, such as on a ROV. <br>
 * @{
*/

/** Opaque type for BVTPing object instances */
typedef struct BVTOpaquePing* BVTPing;

/** Destroy a BVTPing object
 *  @param obj Object pointer
*/
BVTSDK_EXPORT void BVTPing_Destroy(BVTPing obj);

/** Creates and returns a copy of this ping.
 * \attention Don't forget to call Destroy on the returned copy.
 * @param self Object pointer
 * @param the_copy A copy of this ping. 
 * @returns the_copy

 */
BVTSDK_EXPORT RetVal BVTPing_Copy(BVTPing self, BVTPing* the_copy);

/** Change the range window of this ping by removing data from the start or the end of the received singnal.
 * \attention This will fail if you try to decrease the existing start range or increase the existing stop range
 * @param self Object pointer
 * @param new_start The new start range in meters 
 * @param new_stop The new stop range in meters 
 */
BVTSDK_EXPORT RetVal BVTPing_AdjustRange(BVTPing self, float new_start, float new_stop);

/** Return the ping number (i.e., index in file).
 * Ping numbers only have meaning if the ping came from a file.
 * @param self Object pointer
 * @param number ping number 
 * @returns number

 */
BVTSDK_EXPORT RetVal BVTPing_GetPingNumber(BVTPing self, int* number);

/** Return the head ID this ping was captured, or saved with.
 * @param self Object pointer
 * @param id head id
 * @returns id

 */
BVTSDK_EXPORT RetVal BVTPing_GetHeadID(BVTPing self, int* id);

/** Return the ping's timestamp in seconds since 00:00:00 UTC, January 1, 1970 
 * Pings are timestamped using a standard UNIX time stamp. This is 
 * a similar value to that returned by the time() C standard library 
 * function. In fact, the only difference is the addition of fractional seconds.
 * @param self Object pointer
 * @param timestamp ping timestamp
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTPing_GetTimestamp(BVTPing self, double* timestamp);

/** Return the ping's timestamp's offset in seconds from UTC time.  Add this value to that returned by BVTPing_GetTimestamp() to obtain UTC time.
 * @param self Object pointer
 * @param offset timezone offset
 * @returns offset

 */
BVTSDK_EXPORT RetVal BVTPing_GetTimeZoneOffset(BVTPing self, int* offset);

/** Set the ping's internal time stamp.  See BVTPing_GetTimestamp() for more information. 
 * Note: BlueView strongly recommends that users NOT directly set the time stamp as 
 * it is set internally when the ping is actually initiated.  If you are trying to 
 * synchronize two systems, it is far better to simply make sure that the system
 * clocks are synchronized, as the ping timestamp is created from the 
 * PC's internal clock. Network Time Protocol and GPS sources provide highly 
 * accurate ways to accomplish this.
 * Caution: This also overwrites the ping's recorded time zone offset with the client operating system's time zone offset.
 * Call BVTPing_SetTimeZoneOffset after BVTPing_SetTimestamp if you need to maintain the original offset.
 * @param self Object pointer
 * @param sec Timestamp in seconds since 00:00:00 UTC, January 1, 1970 
 */
BVTSDK_EXPORT RetVal BVTPing_SetTimestamp(BVTPing self, double sec);

/** Set the ping's time zone offset in seconds from UTC time.
 * @param self Object pointer
 * @param timeZoneOffset The timestamp's offset in seconds from UTC time. 
 */
BVTSDK_EXPORT RetVal BVTPing_SetTimeZoneOffset(BVTPing self, int timeZoneOffset);

/** Retrieve the angular limits of the ping's field-of-view. Note that the limits
 * reported represent only the minimum and maximum angles associated with any
 * pixel in the FOV. It is possible (depending on sonar configuration) that not
 * all pixels within the reported field-of-view are populated with data.
 * @param self Object pointer
 * @param minAngleInDegrees minimum angle in the ping's field-of-view
 * @returns minAngleInDegrees

 * @param maxAngleInDegrees maximum angle in the ping's field-of-view
 * @returns maxAngleInDegrees

 */
BVTSDK_EXPORT RetVal BVTPing_GetFOV(BVTPing self, float* minAngleInDegrees, float* maxAngleInDegrees);

/** Return the ping's the start range in meters.
 * @param self Object pointer
 * @param range This ping's start range in meters 
 * @returns range

 */
BVTSDK_EXPORT RetVal BVTPing_GetStartRange(BVTPing self, float* range);

/** Return the stop range in meters.
 * @param self Object pointer
 * @param range This ping's stop range in meters 
 * @returns range

 */
BVTSDK_EXPORT RetVal BVTPing_GetStopRange(BVTPing self, float* range);

/** Return the sound speed this ping was recorded at
 * @param self Object pointer
 * @param sound_speed the current speed of sound in water for this ping in meters per second 
 * @returns sound_speed

 */
BVTSDK_EXPORT RetVal BVTPing_GetSoundSpeed(BVTPing self, int* sound_speed);

/** Retrieve an image of this ping, according to the parameters set
 * in the head used to get this ping. See Head and MagImage documentation
 * for more details.
 * @param self Object pointer
 * @param img image 
 * @returns img

 * @deprecated This function will be removed in a future version of the SDK

 */
BVTSDK_EXPORT RetVal BVTPing_GetImage(BVTPing self, BVTMagImage* img);

/** Retrieve an XY-format image of this ping, according to the parameters set
 * in the head used to get this ping. Use BVTHead_SetImageSizeXY() to set the size for this image.
 * See Head and MagImage documentation for more details.
 * @param self Object pointer
 * @param img image 
 * @returns img

 * @deprecated This function will be removed in a future version of the SDK

 */
BVTSDK_EXPORT RetVal BVTPing_GetImageXY(BVTPing self, BVTMagImage* img);

/** Retrieve an RTheta-format image of this ping, according to the parameters set
 * in the head used to get this ping. Use BVTHead_SetImageWidthRTheta() to set the size for this image.
 * See Head and MagImage documentation for more details.
 * @param self Object pointer
 * @param img image 
 * @returns img

 * @deprecated This function will be removed in a future version of the SDK

 */
BVTSDK_EXPORT RetVal BVTPing_GetImageRTheta(BVTPing self, BVTMagImage* img);

/** Returns the percentage of dyn. range (0.0 - 1.0) of the max value in this
 * ping. A value of 1.0 indicates clipped data. A value near 0.0 indicates 
 * that no targets were illuminated.
 * @param self Object pointer
 * @param max max return signal 
 * @returns max

 */
BVTSDK_EXPORT RetVal BVTPing_GetMaxReturnSignal(BVTPing self, float* max);

/** Creates a copy of the navigation data stored with this ping. Note
 * that the data is copied out of the ping into the local NavData object,
 * a pointer to internal data is not returned. Thus, the NavData object
 * may be used after the Ping is destroyed.
 * @param self Object pointer
 * @param nav_data A copy of the NavData stored in this object. 
 * @returns nav_data

 */
BVTSDK_EXPORT RetVal BVTPing_GetNavDataCopy(BVTPing self, BVTNavData* nav_data);

/** Returns true if this ping has a valid Navigation data object.
 * @param self Object pointer
 * @param has_nav_data True if this ping has a valid Navigation data object 
 * @returns has_nav_data

 */
BVTSDK_EXPORT RetVal BVTPing_HasNavData(BVTPing self, int* has_nav_data);

/** Stores a copy of the navigation data with the other ping data, so the data
 * will be saved if the ping is saved to a file.
 * @param self Object pointer
 * @param nav_data Navigation data object to copy into this Ping 
 */
BVTSDK_EXPORT RetVal BVTPing_SetNavData(BVTPing self, const BVTNavData nav_data);

/** Video frame is raw RGB (RGBRGB...) 
 */
#define BVTPING_VIDEO_RGB	(int)(0)

/** Video frame is a JPEG image 
 */
#define BVTPING_VIDEO_JPEG	(int)(1)

/** Returns the video frame associated with this ping.
 * The video frame may be in any of the supported image formats.
 * Some image formats may already contain parameters such as height
 * and width (and more), but valid pointers must be passed in anyway.
 * The same pointer can be passed in for multiple parameters, if
 * those parameters will not be used. However, they are provided both
 * for formats which do not have embedded size information, and so that
 * the display window may be created and/or sized without parsing
 * the image data.<br>
 * NOTE: This function will return BVT_NO_VIDEO_FRAME if there
 * is no video frame stored for the ping. <br>
 * WARNING: The data buffer must NOT be accessed after the ping object is destroyed,
 * as the pointer will no longer point to valid data and will likely crash your application!
 * So copy off the data before destroying the Ping object. <br>
 * The single value pointers must be pointers to allocated data, not just
 * pointer types. For example:<br>
 * int height, width, length, type, retval;<br>
 * int * frame_ptr;<br>
 * retval = BVTPing_GetVideoFrame( frame_ptr, &height, &width, &length, &type );<br>
 * @param self Object pointer
 * @param frame Pointer to a pointer to the image data to be returned 
 * @returns frame

 * @param height Pointer to return the uncompressed height of the image, in pixels 
 * @returns height

 * @param width Pointer to return the uncompressed width of the image, in pixels 
 * @returns width

 * @param length Pointer to return the actual size of the data buffer returned, in bytes, which may include additional metadata for some image types 
 * @returns length

 * @param type pointer to return the type of image returned: FRAME_RGB or FRAME_JPEG 
 * @returns type

 */
BVTSDK_EXPORT RetVal BVTPing_GetVideoFrame(BVTPing self, unsigned char ** frame, int* height, int* width, int* length, int* type);

/** Store a JPEG image to save with this ping.
 * Note that the height and width values will simply be stored and
 * available to read when the frame is retrieved. These have no effect
 * on the actual image size (the image will not be resized).
 * The length however is very important, as it determines how far from
 * the passed image pointer data will be read. An incorrect length could
 * result in an application crash.
 * @param self Object pointer
 * @param frame Pointer to a single video frame
 * @param height Uncompressed height of the image, in pixels 
 * @param width Uncompressed width of the image, in pixels 
 * @param length Actual number of bytes being passed in 
 */
BVTSDK_EXPORT RetVal BVTPing_SetVideoFrameJPEG(BVTPing self, const unsigned char frame[], int height, int width, int length);

/** Stores a copy of the per ping Positioner Orientation data in the ping, so the data
 * will be saved if the ping is saved to a file. This orientation object represents
 * the dynamic position of the head as it is moved via a positioner. Other orientation
 * information will be needed to determine the absolute position of the head relative
 * to a larger coordinate system (i.e. the vessel). NOTE: the X rotation represents
 * side to side panning, and Y rotation represents vertical tilt. (which might be opposite
 * from previous SDKs; though the older files will be translated to the new convention.)
 * @param self Object pointer
 * @param orient Orientation data object to copy from 
 */
BVTSDK_EXPORT RetVal BVTPing_SetPositionerOrientation(BVTPing self, const BVTOrientation orient);

/** Retrieves a copy of the per ping Positioner Orientation data which was stored with this ping.,
 * Note that the data is copied out of the ping into the local Orientation object,
 * a pointer to internal data is not returned. Thus, the Orientation object
 * may be used after the Ping is destroyed. (see BVTPing_SetPositionerOrientation, above, for more
 * information on the meaning of the PositionerOrientation data)
 * @param self Object pointer
 * @param orient Orientation data object to copy the existing Orientation data to 
 * @returns orient

 */
BVTSDK_EXPORT RetVal BVTPing_GetPositionerOrientationCopy(BVTPing self, BVTOrientation* orient);

/** Simplified function to set just the rotations from the Ping's PositionerOrientation object.
 * The offsets and calibration values will be zero. The source and target frames will be set to
 * OR_POSITIONER and OR_HEAD, respectively.
 * This function is most useful when only pan/tilt values are available and needed.
 * See the BVTPing_SetPositionerOrientation() documentation for more details.
 * @param self Object pointer
 * @param X_axis_degrees pan axis rotation 
 * @param Y_axis_degrees tilt axis rotation 
 * @param Z_axis_degrees not currently used 
 */
BVTSDK_EXPORT RetVal BVTPing_SetPositionerRotations(BVTPing self, double X_axis_degrees, double Y_axis_degrees, double Z_axis_degrees);

/** Simplified function to get just the rotations from the Ping's PositionerOrientation object.
 * @param self Object pointer
 * @param X_axis_degrees pan axis rotation 
 * @returns X_axis_degrees

 * @param Y_axis_degrees tilt axis rotation 
 * @returns Y_axis_degrees

 * @param Z_axis_degrees not currently used 
 * @returns Z_axis_degrees

 */
BVTSDK_EXPORT RetVal BVTPing_GetPositionerRotations(BVTPing self, double* X_axis_degrees, double* Y_axis_degrees, double* Z_axis_degrees);

/** Returns true if this ping has a raw time series.
 * @param self Object pointer
 * @param has_signal True if this ping has a raw time series. 
 * @returns has_signal

 */
BVTSDK_EXPORT RetVal BVTPing_HasSignal(BVTPing self, int* has_signal);

/** Returns true if this ping has a post-processed profile.
 * @param self Object pointer
 * @param has_stored_profile True if this ping has a post-processed profile. 
 * @returns has_stored_profile

 */
BVTSDK_EXPORT RetVal BVTPing_HasStoredRangeProfile(BVTPing self, int* has_stored_profile);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif

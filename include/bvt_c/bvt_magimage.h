/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTMAGIMAGE_H__
#define __BVTMAGIMAGE_H__

#include <bvt_c/bvt_retval.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && _MSC_VER >= 1310
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT __declspec(deprecated("This will be removed in a future version of the BlueView SDK"))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
#	else
#		define BVTSDK_EXPORT
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && ((__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)))
#		define BVTSDK_EXPORT_OBSOLETE BVT_EXPORT __attribute__((__deprecated__("This will be removed in a future version of the BlueView SDK")))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** @file
 * @defgroup BVTMagImage BVTMagImage
 * @brief
 * MagImage is short for MagnitudeImage.  It provides access to a 2d 
 * image where each pixel is intensity of the return from a particular
 * point on a plane emanating from the head.  It can be thought of as 
 * a 16bit grey-scale image.
 * @{
*/

/** Opaque type for BVTMagImage object instances */
typedef struct BVTOpaqueMagImage* BVTMagImage;

/** Destroy a BVTMagImage object
 *  @param obj Object pointer
*/
BVTSDK_EXPORT void BVTMagImage_Destroy(BVTMagImage obj);

/** Return the value of the pixel at (row, col)
 * @param self Object pointer
 * @param row Requested row 
 * @param col Requested col 
 * @param pixel Value of the pixel at (row, col) 
 * @returns pixel

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetPixel(BVTMagImage self, int row, int col, unsigned short* pixel);

/** Return a pointer to a row of pixels	
 * @param self Object pointer
 * @param row Requested row index 
 * @param rowPointer pointer to pointer to row
 * @returns rowPointer

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetRow(BVTMagImage self, int row, unsigned short** rowPointer);

/** Return a pointer to the entire image.
 * The image or organized in Row-Major order (just like C/C++).
 * @param self Object pointer
 * @param bitsPointer pointer to pointer to image 
 * @returns bitsPointer

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetBits(BVTMagImage self, unsigned short** bitsPointer);

/** Copy the raw image data to the user specified buffer. See BVTMagImage_GetBits for more info.
 * @param self Object pointer
 * @param data Pointer to a valid buffer 
 * @returns data

 * @param len The size of the buffer pointed to by data in pixels NOT bytes. 
 */
BVTSDK_EXPORT RetVal BVTMagImage_CopyBits(BVTMagImage self, unsigned short data[], unsigned int len);

/** Save the image in PGM (PortableGreyMap) format. http://en.wikipedia.org/wiki/Netpbm_format
 * Note that few programs actually support loading a 16bit PGM. 
 * A good image viewer for Windows is Irfanview: http://www.irfanview.com/ 
 * Once you load a PGM, you will most likely need to tone map it or the majority of the image will appear black.
 * @param self Object pointer
 * @param file_name File name to save to 
 */
BVTSDK_EXPORT RetVal BVTMagImage_SavePGM(BVTMagImage self, const char* file_name);

/** Return the height (in pixels) of this image
 * @param self Object pointer
 * @param height image height
 * @returns height

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetHeight(BVTMagImage self, int* height);

/** Return the width (in pixels) of this image
 * @param self Object pointer
 * @param width image width
 * @returns width

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetWidth(BVTMagImage self, int* width);

/** Return the max range (in meters) to a non-blank pixel in the image
 * @param self Object pointer
 * @param maxRange max range to a non-blank pixel in the image
 * @returns maxRange

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetMaxRangeOfPixel(BVTMagImage self, float* maxRange);

/** 
 * @param self Object pointer
 * @param type Image type constant (IMAGETYPE_*) 
 * @returns type

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetImageType(BVTMagImage self, int* type);

/** Return the range resolution of this image.
 * The resolution is returned in meters per pixel row.
 * @param self Object pointer
 * @param resolution image range resolution
 * @returns resolution

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetRangeResolution(BVTMagImage self, double* resolution);

/** Only valid for R-Theta images.
 * Returns the bearing resolution, in degrees per pixel column.
 * @param self Object pointer
 * @param resolution image bearing resolution
 * @returns resolution

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetBearingResolution(BVTMagImage self, double* resolution);

/** Retrieve the image row of the origin.
 * In most cases the origin row will be outside of the image boundaries (i.e., negative). The origin is the 'location' (in pixels) of the sonar head in image plane.
 * @param self Object pointer
 * @param row pixel row
 * @returns row

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetOriginRow(BVTMagImage self, int* row);

/** Retrieve the image column of the origin.
 * The origin is the 'location' (in pixels) of the
 * sonar head in image plane.
 * @param self Object pointer
 * @param column pixel column
 * @returns column

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetOriginCol(BVTMagImage self, int* column);

/** Retrieve the range (from the sonar head) of the specified pixel (in meters)
 * @param self Object pointer
 * @param row pixel row 
 * @param col pixel col 
 * @param range range to given pixel 
 * @returns range

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetPixelRange(BVTMagImage self, int row, int col, double* range);

/** Retrieve the bearing relative to the sonar head of the specified pixel
 * @param self Object pointer
 * @param row pixel row 
 * @param col pixel col 
 * @param bearing bearing to given pixel 
 * @returns bearing

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetPixelRelativeBearing(BVTMagImage self, int row, int col, double* bearing);

/** Return the pixel coordinate at the specified physical location.
 * The returned coordinate may be outside this image's bounds.
 * @param self Object pointer
 * @param range range in meters 
 * @param bearing bearing in radians 
 * @param x pixel index in the X-axis 
 * @returns x

 * @param y pixel index in the Y-axis 
 * @returns y

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetPixelCoordinateAtRangeBearing(BVTMagImage self, float range, float bearing, int* x, int* y);

/** Return the pixel coordinate at the specified physical location in the sonar's frame.
 * The returned coordinate may be outside this image's bounds.
 * @param self Object pointer
 * @param x_meters X distance in meters 
 * @param y_meters Y distance in meters 
 * @param x pixel index in the X-axis 
 * @returns x

 * @param y pixel index in the Y-axis 
 * @returns y

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetPixelCoordinateAtXY(BVTMagImage self, float x_meters, float y_meters, int* x, int* y);

/** Return the minimum angle for the sonar's imaging field of view. 
 * The angle is returned in degrees and referenced with respect to sonar head boresight (clockwise-positive).
 * @param self Object pointer
 * @param angle min. angle
 * @returns angle

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetFOVMinAngle(BVTMagImage self, float* angle);

/** Return the maximum angle for the sonar's imaging field of view. 
 * The angle is returned in degrees and referenced with respect to sonar head boresight (clockwise-positive).
 * @param self Object pointer
 * @param angle max. angle
 * @returns angle

 */
BVTSDK_EXPORT RetVal BVTMagImage_GetFOVMaxAngle(BVTMagImage self, float* angle);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif

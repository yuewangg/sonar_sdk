/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/

#ifndef __CPP_BVTSONARDISCOVERYAGENT_HPP__
#define __CPP_BVTSONARDISCOVERYAGENT_HPP__

#include <string>
#ifdef _WIN32
#   include <memory>
#else
#   include <cstddef>
#   if defined (__GLIBCXX__) && __cplusplus <= 199711L
#      include <tr1/memory>
       namespace std {
          using std::tr1::shared_ptr;
       }
#   else
#       include <memory>
#   endif
#endif
#include <bvt_cpp/bvt_retval.hpp>
#include <bvt_cpp/bvt_error.hpp>

namespace BVTSDK
{

    /// <summary>
    /// The SonarDiscoveryAgent is used to discover any BlueView
    /// sonars resident on a network.
    /// <summary>
    class SonarDiscoveryAgent
    {
    public:
        SonarDiscoveryAgent()
        {
            BVTSonarDiscoveryAgent p = BVTSonarDiscoveryAgent_Create();
            _owned = std::shared_ptr<BVTOpaqueSonarDiscoveryAgent>(p , BVTSonarDiscoveryAgent_Destroy );
        }
    public: /*consider private*/
        SonarDiscoveryAgent(BVTSonarDiscoveryAgent p)
        {
            _owned = std::shared_ptr<BVTOpaqueSonarDiscoveryAgent>(p , BVTSonarDiscoveryAgent_Destroy );
        }
    public:
        ~SonarDiscoveryAgent()
        {
            
        }

    //public:
    //  SonarDiscoveryAgent(const SonarDiscoveryAgent &) {}
    //  SonarDiscoveryAgent& operator=(const SonarDiscoveryAgent &) {}
    public:
        /// SDK object pointer
        BVTSonarDiscoveryAgent Handle() const
        {
            return _owned.get();
        }
    private:
        std::shared_ptr<BVTOpaqueSonarDiscoveryAgent> _owned;

    public:
        //
        // Causes the SonarDiscoveryAgent to begin probing the network for sonars.
        //      
        void Start()
        {
            int error_code = BVTSonarDiscoveryAgent_Start(_owned.get());
            if (0 != error_code)
                throw SdkException(error_code);
        }

        //
        // Causes the SonarDiscoveryAgent to stop probing for sonars.
        //      
        void Stop()
        {
            int error_code = BVTSonarDiscoveryAgent_Stop(_owned.get());
            if (0 != error_code)
                throw SdkException(error_code);
        }

        //
        // Get the number of sonars discovered on the network.
        //
        // @param sonar_count Number of sonars discovered       
        int GetSonarCount()
        {
            int sonar_count;
            int error_code = BVTSonarDiscoveryAgent_GetSonarCount(_owned.get(), /* out */ &sonar_count);
            if (0 != error_code)
                throw SdkException(error_code);
            return sonar_count;
        }

        //
        // Returns the host IP address (as a null-terminated string) for the specified sonar.
        // The sonar_index parameter is zero-based, that is, if @ref GetSonarCount returned a value of 3, then valid sonar_index values are 0, 1, and 2.
        // A buffer size of 20 characters should be sufficient for the buffer.
        //
        // @param sonar_index Which sonar to return information about 
        // @param buffer buffer to hold the null-terminated string to be passed back 
        // @param buffer_size total number of characters the passed buffer can hold         
        std::string GetSonarInfo(int sonar_index)
        {
            char buffer[256] = { 0 };
            int buffer_size = 255;
            int error_code = BVTSonarDiscoveryAgent_GetSonarInfo(_owned.get(), sonar_index, buffer, buffer_size);
            if (0 != error_code)
                throw SdkException(error_code);
            return std::string(buffer);
        }

    };

}

#endif

/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/

#ifndef __CPP_BVTCOLORMAPPER_HPP__
#define __CPP_BVTCOLORMAPPER_HPP__

#include <string>
#ifdef _WIN32
#   include <memory>
#else
#   include <cstddef>
#   if defined (__GLIBCXX__) && __cplusplus <= 199711L
#      include <tr1/memory>
       namespace std {
          using std::tr1::shared_ptr;
       }
#   else
#       include <memory>
#   endif
#endif
#include <bvt_cpp/bvt_retval.hpp>
#include <bvt_cpp/bvt_error.hpp>
#include <bvt_cpp/bvt_colorimage.hpp>
#include <bvt_cpp/bvt_magimage.hpp>

namespace BVTSDK
{

    class MagImage;
    class ColorImage;

    /// <summary>
    /// Provide support for applying a colormap to a MagImage, thus 
    /// generating a ColorImage.
    /// <summary>
    class ColorMapper
    {
    public:
        ColorMapper()
        {
            BVTColorMapper p = BVTColorMapper_Create();
            _owned = std::shared_ptr<BVTOpaqueColorMapper>(p , BVTColorMapper_Destroy );
        }
    public: /*consider private*/
        ColorMapper(BVTColorMapper p)
        {
            _owned = std::shared_ptr<BVTOpaqueColorMapper>(p , BVTColorMapper_Destroy );
        }
    public:
        ~ColorMapper()
        {
            
        }

    //public:
    //  ColorMapper(const ColorMapper &) {}
    //  ColorMapper& operator=(const ColorMapper &) {}
    public:
        /// SDK object pointer
        BVTColorMapper Handle() const
        {
            return _owned.get();
        }
    private:
        std::shared_ptr<BVTOpaqueColorMapper> _owned;

    public:
        //
        // Load a color map file.
        //
        // @param file Colormap file name       
        void Load(const std::string & file)
        {
            int error_code = BVTColorMapper_Load(_owned.get(), file.c_str());
            if (0 != error_code)
                throw SdkException(error_code);
        }

        //
        // Set the gamma used when colormapping.
        //
        // @param gamma Gamma value         
        void SetGamma(float gamma)
        {
            int error_code = BVTColorMapper_SetGamma(_owned.get(), gamma);
            if (0 != error_code)
                throw SdkException(error_code);
        }

        //
        // Return the current gamma.
        //
        // @param gamma gamma value     
        float GetGamma()
        {
            float gamma;
            int error_code = BVTColorMapper_GetGamma(_owned.get(), /* out */ &gamma);
            if (0 != error_code)
                throw SdkException(error_code);
            return gamma;
        }

        //
        // Set the intensity values to be mapped to the top and bottom of the colormap. 
        // If auto intensity is enabled, this function returns an error.
        //
        // @param top Top colormap threshold (aka intensity) 
        // @param bottom Bottom colormap threshold      
        void SetThresholds(int top, int bottom)
        {
            int error_code = BVTColorMapper_SetThresholds(_owned.get(), top, bottom);
            if (0 != error_code)
                throw SdkException(error_code);
        }

        //
        // Return the upper threshold for the colormap.  The top threshold is also
        // known as 'intensity'.  Lowering the top threshold will make a brighter image.
        //
        // @param threshold upper threshold     
        int GetTopThreshold()
        {
            int threshold;
            int error_code = BVTColorMapper_GetTopThreshold(_owned.get(), /* out */ &threshold);
            if (0 != error_code)
                throw SdkException(error_code);
            return threshold;
        }

        //
        // Return the lower threshold for the colormap.
        //
        // @param threshold lower threshold     
        int GetBottomThreshold()
        {
            int threshold;
            int error_code = BVTColorMapper_GetBottomThreshold(_owned.get(), /* out */ &threshold);
            if (0 != error_code)
                throw SdkException(error_code);
            return threshold;
        }

        //
        // Return true if auto-threshold is enabled, false if it's not.
        //
        // @param is_enabled True if auto-threshold is enabled, false if it's not       
        bool GetAutoMode()
        {
            int is_enabled;
            int error_code = BVTColorMapper_GetAutoMode(_owned.get(), /* out */ &is_enabled);
            if (0 != error_code)
                throw SdkException(error_code);
            return is_enabled > 0;
        }

        //
        // Enable or disable an internal auto-threshold algorithm.
        //
        // @param enable > 0 if auto-threshold should be enabled. 0 otherwise.      
        void SetAutoMode(bool enable)
        {
            int error_code = BVTColorMapper_SetAutoMode(_owned.get(), (enable ? 1 : 0));
            if (0 != error_code)
                throw SdkException(error_code);
        }

        //
        // Get the lowest value the top threshold is allowed to attain while auto mode is enabled.
        //
        // @param top_minimum The lowest value the top threshold can attain.        
        int GetAutoModeTopThresholdMinimum()
        {
            int top_minimum;
            int error_code = BVTColorMapper_GetAutoModeTopThresholdMinimum(_owned.get(), /* out */ &top_minimum);
            if (0 != error_code)
                throw SdkException(error_code);
            return top_minimum;
        }

        //
        // Set the lowest value the top threshold is allowed to attain while auto mode is enabled.
        //
        // @param top_minimum The lowest value the top threshold can attain.        
        void SetAutoModeTopThresholdMinimum(int top_minimum)
        {
            int error_code = BVTColorMapper_SetAutoModeTopThresholdMinimum(_owned.get(), top_minimum);
            if (0 != error_code)
                throw SdkException(error_code);
        }

        //
        // Inverts the color mapping process to determine the intensity value for a given image pixel.
        // If the color provided is not an entry of this colormap, the returned intensity is zero.
        //
        // @param color The 32bit, 4 channel RGBA color to look up. See BVTColorImage.GetPixel() 
        // @param intensity The intensity that corresponds to this color.       
        unsigned short PixelIntensity(unsigned int color)
        {
            unsigned short intensity;
            int error_code = BVTColorMapper_PixelIntensity(_owned.get(), color, /* out */ &intensity);
            if (0 != error_code)
                throw SdkException(error_code);
            return intensity;
        }

        //
        // Apply a colormap to an intensity image to produce a ColorImage.
        //
        // @param input Input magnitude image 
        // @param output Output color image         
        ColorImage MapImage(const MagImage & input)
        {
            BVTColorImage output_ptr = NULL;
            int error_code = BVTColorMapper_MapImage(_owned.get(), input.Handle(), & output_ptr);
            if (0 != error_code)
                throw SdkException(error_code);
                        return ColorImage(output_ptr);
        }

        //
        // Gets the RGB color that is mapped to a maximum intensity return
        //
        // @param r The red value assigned to pixels of maximum intensity 
        // @param g The green value assigned to pixels of maximum intensity 
        // @param b The blue value assigned to pixels of maximum intensity      
        void GetTopColor(unsigned int *r, unsigned int *g, unsigned int *b)
        {
            int error_code = BVTColorMapper_GetTopColor(_owned.get(), r, g, b);
            if (0 != error_code)
                throw SdkException(error_code);
        }

        //
        // Gets the RGB color that is mapped to a minimum intensity return
        //
        // @param r The red value assigned to pixels of minimum intensity 
        // @param g The green value assigned to pixels of minimum intensity 
        // @param b The blue value assigned to pixels of minimum intensity      
        void GetBottomColor(unsigned int *r, unsigned int *g, unsigned int *b)
        {
            int error_code = BVTColorMapper_GetBottomColor(_owned.get(), r, g, b);
            if (0 != error_code)
                throw SdkException(error_code);
        }

        //
        // Return the number of color entries in this colormap.
        //
        // @param count The number of color entries in this colormap        
        int GetColorValuesCount()
        {
            int count;
            int error_code = BVTColorMapper_GetColorValuesCount(_owned.get(), /* out */ &count);
            if (0 != error_code)
                throw SdkException(error_code);
            return count;
        }

        //
        // Return the color of the entry at the specified index.
        //
        // @param index The zero-based index of the color entry to query 
        // @param red red 
        // @param green green 
        // @param blue blue 
        // @param alpha reserved        
        void GetColorValue(int index, unsigned int *red, unsigned int *green, unsigned int *blue, unsigned int *alpha)
        {
            int error_code = BVTColorMapper_GetColorValue(_owned.get(), index, red, green, blue, alpha);
            if (0 != error_code)
                throw SdkException(error_code);
        }

    };

}

#endif

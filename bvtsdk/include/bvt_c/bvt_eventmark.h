/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTEVENTMARK_H__
#define __BVTEVENTMARK_H__

#include <bvt_c/bvt_retval.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && _MSC_VER >= 1310
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT __declspec(deprecated("This will be removed in a future version of the BlueView SDK"))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
#	else
#		define BVTSDK_EXPORT
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && ((__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)))
#		define BVTSDK_EXPORT_OBSOLETE BVT_EXPORT __attribute__((__deprecated__("This will be removed in a future version of the BlueView SDK")))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** @file
 * @defgroup BVTEventMark BVTEventMark
 * @brief
 * An EventMark allows the user to insert arbitrary information into a sonar file.  The user can
 * store two strings, one called a "Key" string and the other a "Text" string, in an EventMark. 
 * The EventMarks are stored and retrieved independently of Heads or Pings.
 * NOTE: EventMark objects will only be saved to a sonar of type FILE. 
 * @{
*/

/** Opaque type for BVTEventMark object instances */
typedef struct BVTOpaqueEventMark* BVTEventMark;

/** Create a BVTEventMark object */
BVTSDK_EXPORT BVTEventMark BVTEventMark_Create();
/** Destroy a BVTEventMark object
 *  @param obj Object pointer
*/
BVTSDK_EXPORT void BVTEventMark_Destroy(BVTEventMark obj);

/** Return the timestamp in seconds since 00:00:00 UTC, January 1, 1970 
 * The timestamp is a standard UNIX time stamp. This is 
 * a similar value to that returned by the time() C standard library 
 * function. In fact, the only difference is the addition of fractional seconds.
 * @param self Object pointer
 * @param timestamp timestamp of event mark 
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTEventMark_GetTimestamp(BVTEventMark self, double* timestamp);

/** The max length of an EventMark key string 
 */
#define BVTEVENTMARK_MAX_KEYLENGTH	(int)(80)

/** Return the number of characters stored in the Key string, not including the null-term character.  You'll need to allocate a
 * character buffer of at least length @ref BVTEventMark_GetKeyStringLength()+1 to retrieve the entire Key.
 * You can also allocate a buffer of @ref BVTEVENTMARK_MAX_KEYLENGTH at compile time.
 * @param self Object pointer
 * @param length key length 
 * @returns length

 */
BVTSDK_EXPORT RetVal BVTEventMark_GetKeyStringLength(BVTEventMark self, int* length);

/** Retrieves a copy of the EventMark's Key string.
 * @param self Object pointer
 * @param buffer buffer to hold the null-terminated string to be passed back 
 * @returns buffer

 * @param buffer_size total number of characters the passed buffer can hold 
 */
BVTSDK_EXPORT RetVal BVTEventMark_GetKeyString(BVTEventMark self, char* buffer, int buffer_size);

/** The max length of an EventMark text string 
 */
#define BVTEVENTMARK_MAX_TEXTLENGTH	(int)(512)

/** Return the number of characters stored in the Text string, not including the null-term character. You'll need to allocate a
 * character buffer of at least length @ref BVTEventMark_GetTextStringLength()+1 to retrieve the entire string.
 * You can also allocate a buffer of @ref BVTEVENTMARK_MAX_TEXTLENGTH at compile time.
 * @param self Object pointer
 * @param length text string length 
 * @returns length

 */
BVTSDK_EXPORT RetVal BVTEventMark_GetTextStringLength(BVTEventMark self, int* length);

/** Retrieves a copy of the EventMark's Text string.
 * @param self Object pointer
 * @param buffer buffer to hold the null-terminated string to be passed back 
 * @returns buffer

 * @param buffer_size total number of characters the passed buffer can hold 
 */
BVTSDK_EXPORT RetVal BVTEventMark_GetTextString(BVTEventMark self, char* buffer, int buffer_size);

/** Return the "ping-by-time" number associated with the EventMark.
 * This is typically the ping immediately before the EventMark was created.
 * @param self Object pointer
 * @param number ping number (zero-based index)
 * @returns number

 */
BVTSDK_EXPORT RetVal BVTEventMark_GetPingNumber(BVTEventMark self, int* number);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif

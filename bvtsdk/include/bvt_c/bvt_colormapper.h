/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTCOLORMAPPER_H__
#define __BVTCOLORMAPPER_H__

#include <bvt_c/bvt_retval.h>
#include <bvt_c/bvt_magimage.h>
#include <bvt_c/bvt_colorimage.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && _MSC_VER >= 1310
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT __declspec(deprecated("This will be removed in a future version of the BlueView SDK"))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
#	else
#		define BVTSDK_EXPORT
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && ((__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)))
#		define BVTSDK_EXPORT_OBSOLETE BVT_EXPORT __attribute__((__deprecated__("This will be removed in a future version of the BlueView SDK")))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** @file
 * @defgroup BVTColorMapper BVTColorMapper
 * @brief
 * Provide support for applying a colormap to a MagImage, thus 
 * generating a ColorImage.
 * @{
*/

/** Opaque type for BVTColorMapper object instances */
typedef struct BVTOpaqueColorMapper* BVTColorMapper;

/** Create a BVTColorMapper object */
BVTSDK_EXPORT BVTColorMapper BVTColorMapper_Create();
/** Destroy a BVTColorMapper object
 *  @param obj Object pointer
*/
BVTSDK_EXPORT void BVTColorMapper_Destroy(BVTColorMapper obj);

/** BVTColorMapper_Load a color map file.
 * @param self Object pointer
 * @param file Colormap file name 
 */
BVTSDK_EXPORT RetVal BVTColorMapper_Load(BVTColorMapper self, const char* file);

/** Set the gamma used when colormapping.
 * @param self Object pointer
 * @param gamma Gamma value 
 */
BVTSDK_EXPORT RetVal BVTColorMapper_SetGamma(BVTColorMapper self, float gamma);

/** Return the current gamma.
 * @param self Object pointer
 * @param gamma gamma value
 * @returns gamma

 */
BVTSDK_EXPORT RetVal BVTColorMapper_GetGamma(BVTColorMapper self, float* gamma);

/** Set the intensity values to be mapped to the top and bottom of the colormap. 
 * If auto intensity is enabled, this function returns an error.
 * @param self Object pointer
 * @param top Top colormap threshold (aka intensity) 
 * @param bottom Bottom colormap threshold 
 */
BVTSDK_EXPORT RetVal BVTColorMapper_SetThresholds(BVTColorMapper self, int top, int bottom);

/** Return the upper threshold for the colormap.  The top threshold is also
 * known as 'intensity'.  Lowering the top threshold will make a brighter image.
 * @param self Object pointer
 * @param threshold upper threshold
 * @returns threshold

 */
BVTSDK_EXPORT RetVal BVTColorMapper_GetTopThreshold(BVTColorMapper self, int* threshold);

/** Return the lower threshold for the colormap.
 * @param self Object pointer
 * @param threshold lower threshold
 * @returns threshold

 */
BVTSDK_EXPORT RetVal BVTColorMapper_GetBottomThreshold(BVTColorMapper self, int* threshold);

/** Return true if auto-threshold is enabled, false if it's not.
 * @param self Object pointer
 * @param is_enabled True if auto-threshold is enabled, false if it's not
 * @returns is_enabled

 */
BVTSDK_EXPORT RetVal BVTColorMapper_GetAutoMode(BVTColorMapper self, int* is_enabled);

/** Enable or disable an internal auto-threshold algorithm.
 * @param self Object pointer
 * @param enable > 0 if auto-threshold should be enabled. 0 otherwise. 
 */
BVTSDK_EXPORT RetVal BVTColorMapper_SetAutoMode(BVTColorMapper self, int enable);

/** Get the lowest value the top threshold is allowed to attain while auto mode is enabled.
 * @param self Object pointer
 * @param top_minimum The lowest value the top threshold can attain. 
 * @returns top_minimum

 */
BVTSDK_EXPORT RetVal BVTColorMapper_GetAutoModeTopThresholdMinimum(BVTColorMapper self, int* top_minimum);

/** Set the lowest value the top threshold is allowed to attain while auto mode is enabled.
 * @param self Object pointer
 * @param top_minimum The lowest value the top threshold can attain. 
 */
BVTSDK_EXPORT RetVal BVTColorMapper_SetAutoModeTopThresholdMinimum(BVTColorMapper self, int top_minimum);

/** Inverts the color mapping process to determine the intensity value for a given image pixel.
 * If the color provided is not an entry of this colormap, the returned intensity is zero.
 * @param self Object pointer
 * @param color The 32bit, 4 channel RGBA color to look up. See BVTColorImage.GetPixel() 
 * @param intensity The intensity that corresponds to this color. 
 * @returns intensity

 */
BVTSDK_EXPORT RetVal BVTColorMapper_PixelIntensity(BVTColorMapper self, unsigned int color, unsigned short* intensity);

/** Apply a colormap to an intensity image to produce a ColorImage.
 * @param self Object pointer
 * @param input Input magnitude image 
 * @param output Output color image 
 * @returns output

 */
BVTSDK_EXPORT RetVal BVTColorMapper_MapImage(BVTColorMapper self, const BVTMagImage input, BVTColorImage* output);

/** Gets the RGB color that is mapped to a maximum intensity return
 * @param self Object pointer
 * @param r The red value assigned to pixels of maximum intensity 
 * @returns r

 * @param g The green value assigned to pixels of maximum intensity 
 * @returns g

 * @param b The blue value assigned to pixels of maximum intensity 
 * @returns b

 */
BVTSDK_EXPORT RetVal BVTColorMapper_GetTopColor(BVTColorMapper self, unsigned int* r, unsigned int* g, unsigned int* b);

/** Gets the RGB color that is mapped to a minimum intensity return
 * @param self Object pointer
 * @param r The red value assigned to pixels of minimum intensity 
 * @returns r

 * @param g The green value assigned to pixels of minimum intensity 
 * @returns g

 * @param b The blue value assigned to pixels of minimum intensity 
 * @returns b

 */
BVTSDK_EXPORT RetVal BVTColorMapper_GetBottomColor(BVTColorMapper self, unsigned int* r, unsigned int* g, unsigned int* b);

/** Return the number of color entries in this colormap.
 * @param self Object pointer
 * @param count The number of color entries in this colormap 
 * @returns count

 */
BVTSDK_EXPORT RetVal BVTColorMapper_GetColorValuesCount(BVTColorMapper self, int* count);

/** Return the color of the entry at the specified index.
 * @param self Object pointer
 * @param index The zero-based index of the color entry to query 
 * @param red red 
 * @returns red

 * @param green green 
 * @returns green

 * @param blue blue 
 * @returns blue

 * @param alpha reserved 
 * @returns alpha

 */
BVTSDK_EXPORT RetVal BVTColorMapper_GetColorValue(BVTColorMapper self, int index, unsigned int* red, unsigned int* green, unsigned int* blue, unsigned int* alpha);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif

/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTSONAR_H__
#define __BVTSONAR_H__

#include <bvt_c/bvt_retval.h>
#include <bvt_c/bvt_ping.h>
#include <bvt_c/bvt_head.h>
#include <bvt_c/bvt_navdata.h>
#include <bvt_c/bvt_orientation.h>
#include <bvt_c/bvt_eventmark.h>
#include <bvt_c/bvt_networksettings.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && _MSC_VER >= 1310
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT __declspec(deprecated("This will be removed in a future version of the BlueView SDK"))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
#	else
#		define BVTSDK_EXPORT
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && ((__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)))
#		define BVTSDK_EXPORT_OBSOLETE BVT_EXPORT __attribute__((__deprecated__("This will be removed in a future version of the BlueView SDK")))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** @file
 * @defgroup BVTSonar BVTSonar
 * @brief
 * The Sonar object is the top level object in the SDK.  A sonar 
 * object embodies communication with a single physical sonar unit,
 * or file.  Each sonar contains several heads, which is where most
 * of the functionality is implemented.  Sonar also provides a
 * function to create new data files using BlueView's .son format.
 * @{
*/

/** Opaque type for BVTSonar object instances */
typedef struct BVTOpaqueSonar* BVTSonar;

/** Create a BVTSonar object */
BVTSDK_EXPORT BVTSonar BVTSonar_Create();
/** Destroy a BVTSonar object
 *  @param obj Object pointer
*/
BVTSDK_EXPORT void BVTSonar_Destroy(BVTSonar obj);

enum BVTTriggerOutputEvent
{
	BVT_TRIGGEROUTPUTEVENT_STARTOFTRANSMIT = 0,
	BVT_TRIGGEROUTPUTEVENT_ENDOFTRANSMIT = 1,
	BVT_TRIGGEROUTPUTEVENT_ENDOFACQUISITION = 2
};

/** BVTSonar_Open the sonar type 'type' using the specified parameters.
 * Allowed types (and parameters):
 * - FILE <br>
 * [filename] - Required <br>
 * - NET <br>
 * [host] - Connect to the specified host.<br>
 * - CFILE <br>
 * [files] - semicolon delimited list of files to play as composite sonar<br>
 * - COMP <br>
 * [hosts] - semicolon delimited list of files hosts to connect to.
 * of each host all heads will be used.<br>
 * @param self Object pointer
 * @param type The type of sonar to open	
 * @param type_params Various type-specific parameters 
 */
BVTSDK_EXPORT RetVal BVTSonar_Open(BVTSonar self, const char* type, const char* type_params);

/** Create a new data file.
 * Files are always created by 'cloning' another Sonar
 * object.  This ensures that the file receives all the
 * needed configuration data needed to process 
 * images.
 * @param self Object pointer
 * @param file_name The filename of the file to be created 
 * @param src The Sonar object to clone when creating the file 
 * @param create_params Parameters for (reserved for future use) 
 */
BVTSDK_EXPORT RetVal BVTSonar_CreateFile(BVTSonar self, const char* file_name, const BVTSonar src, const char* create_params);

/** Return the serial 'number' of the sonar. The string may contain non-numeric characters.
 * @param self Object pointer
 * @param buffer buffer to hold the null-terminated string to be passed back 
 * @returns buffer

 * @param buffer_size total number of characters the passed buffer can hold 
 */
BVTSDK_EXPORT RetVal BVTSonar_GetSerialNumber(BVTSonar self, char* buffer, int buffer_size);

/** Return the firmware revision of the sonar. The string may contain non-numeric characters.
 * @param self Object pointer
 * @param buffer buffer to hold the null-terminated string to be passed back 
 * @returns buffer

 * @param buffer_size total number of characters the passed buffer can hold 
 */
BVTSDK_EXPORT RetVal BVTSonar_GetFirmwareRevision(BVTSonar self, char* buffer, int buffer_size);

/** Returns True if this sonar is associated with a file.
 * @param self Object pointer
 * @param is_file True if this sonar is associated with a file 
 * @returns is_file

 */
BVTSDK_EXPORT RetVal BVTSonar_IsFile(BVTSonar self, int* is_file);

/** Returns True if this sonar file has raw ping data.
 * @param self Object pointer
 * @param file_has_raw_ping_data True if this sonar file has raw ping data 
 * @returns file_has_raw_ping_data

 */
BVTSDK_EXPORT RetVal BVTSonar_FileHasRawPingData(BVTSonar self, int* file_has_raw_ping_data);

/** Returns True if this sonar is networked and connected.
 * @param self Object pointer
 * @param is_connected True if this sonar is networked and connected. 
 * @returns is_connected

 */
BVTSDK_EXPORT RetVal BVTSonar_IsConnected(BVTSonar self, int* is_connected);

/** Returns True if this sonar is networked and supports multicast pings.
 * @param self Object pointer
 * @param is_multicast True if this sonar is networked and supports multicast pings 
 * @returns is_multicast

 */
BVTSDK_EXPORT RetVal BVTSonar_SupportsMulticast(BVTSonar self, int* is_multicast);

/** Removes all user settings stored on the sonar and reverts the unit back to
 * its original factory configuration.  IP address of the unit after calling 
 * this function will be 192.168.1.45, while other parameters depend on the type of
 * sonar.
 * @param self Object pointer
 */
BVTSDK_EXPORT RetVal BVTSonar_RevertFactorySettings(BVTSonar self);

/** Gets the size of a file created with BVTSonar_CreateFile(). Only works with
 * file type sonars. A networked sonar will return 0, as will a file
 * type sonar if there is no open file associated with it.
 * The return value must be multiplied by 1000 to get the actual
 * file size in bytes.
 * @param self Object pointer
 * @param fileSize Size (in bytes) of the file sonar
 * @returns fileSize

 */
BVTSDK_EXPORT RetVal BVTSonar_GetFileSize(BVTSonar self, int* fileSize);

/** Return the number of time indexed pings in this file.
 * @param self Object pointer
 * @param count Number of time-indexed pings
 * @returns count

 */
BVTSDK_EXPORT RetVal BVTSonar_GetTimeIndexedPingCount(BVTSonar self, int* count);

/** Retrieve a ping from the file, using the time index.
 * The Ping will have the same Head parent that it was acquired with.
 * If this function is called on a "live" sonar (network),
 * then it always returns the FAILED (1) error.
 * @param self Object pointer
 * @param ping_num The ping number to return 
 * @param ping The returned Ping object
 * @returns ping

 */
BVTSDK_EXPORT RetVal BVTSonar_GetTimeIndexedPing(BVTSonar self, int ping_num, BVTPing* ping);

/** Retrieve a Head object from the sonar
 * @param self Object pointer
 * @param head_num The head number to return 
 * @param head The returned Head object 
 * @returns head

 */
BVTSDK_EXPORT RetVal BVTSonar_GetHead(BVTSonar self, int head_num, BVTHead* head);

/** Return the number of heads on this sonar.
 * @param self Object pointer
 * @param head_count Number of heads
 * @returns head_count

 */
BVTSDK_EXPORT RetVal BVTSonar_GetHeadCount(BVTSonar self, int* head_count);

/** Retrieves a copy of a short string with the model of the sonar.
 * At the time of this writing, 20 characters would easily hold all of
 * the sonar model names.
 * @param self Object pointer
 * @param buffer buffer to hold the null-terminated string to be passed back 
 * @returns buffer

 * @param buffer_size total number of characters the passed buffer can hold 
 */
BVTSDK_EXPORT RetVal BVTSonar_GetSonarModelName(BVTSonar self, char* buffer, int buffer_size);

/** Retrieves a copy of the user-overridable name of the sonar. <br> 
 * The name is set at the factory but is separate from any BlueView model designations. <br>
 * @param self Object pointer
 * @param buffer buffer to hold the null-terminated string to be passed back 
 * @returns buffer

 * @param buffer_size total number of characters the passed buffer can hold 
 */
BVTSDK_EXPORT RetVal BVTSonar_GetSonarName(BVTSonar self, char* buffer, int buffer_size);

/** 
 * @param self Object pointer
 * @param name buffer with the null-terminated string name to be set. 
 */
BVTSDK_EXPORT RetVal BVTSonar_SetSonarName(BVTSonar self, const char* name);

/** Return the sonar's internal temperature in degrees Celsius
 * @param self Object pointer
 * @param temperature temperature
 * @returns temperature

 */
BVTSDK_EXPORT RetVal BVTSonar_GetTemperature(BVTSonar self, float* temperature);

/** Write the object to a file.  Note that this object is not associated with a Ping.
 * @param self Object pointer
 * @param nav_data The Navigation data object to write out 
 */
BVTSDK_EXPORT RetVal BVTSonar_PutNavData(BVTSonar self, const BVTNavData nav_data);

/** Returns the number of NavData objects in this file.  This count does not include any NavData objects that were written to the file as part of a Ping.
 * @param self Object pointer
 * @param count NavData count
 * @returns count

 */
BVTSDK_EXPORT RetVal BVTSonar_GetNavDataCount(BVTSonar self, int* count);

/** Retrieve a NavData object from the file.
 * The index is zero-based, that is, if BVTSonar_GetNavDataCount() returned a value of 3, then valid indices are 0, 1, and 2.
 * @param self Object pointer
 * @param index index of NavData to return 
 * @param nav_data The returned NavData object
 * @returns nav_data

 */
BVTSDK_EXPORT RetVal BVTSonar_GetNavDataCopy(BVTSonar self, int index, BVTNavData* nav_data);

/** Write the object to a file.  Note that this object is not associated with a Ping.
 * @param self Object pointer
 * @param orient The Orientation data object to write out 
 */
BVTSDK_EXPORT RetVal BVTSonar_PutOrientation(BVTSonar self, const BVTOrientation orient);

/** Returns the number of Orientation objects in this file.  This count does not include any Orientation objects that were written to the file as part of a Ping or a Head.
 * @param self Object pointer
 * @param count number of orientation objects
 * @returns count

 */
BVTSDK_EXPORT RetVal BVTSonar_GetOrientationCount(BVTSonar self, int* count);

/** Retrieve a Orientation object from the file.
 * The index is zero-based, that is, if GetlOrientationCount() returned a value of 3, then valid indices are 0, 1, and 2.
 * @param self Object pointer
 * @param index index of Orientation to return 
 * @param orient The returned Orientation object
 * @returns orient

 */
BVTSDK_EXPORT RetVal BVTSonar_GetOrientationCopy(BVTSonar self, int index, BVTOrientation* orient);

/** Creates and writes an EventMark to the current file.
 * The key string contains arbitrary user-defined text. The maximum length is ::BVTEVENTMARK_MAX_KEYLENGTH characters.
 * The text string contains arbitrary user-defined text. The maximum length is ::BVTEVENTMARK_MAX_TEXTLENGTH characters.
 * These strings provide a means to store raw data strings from various sensors such as a GPS or compass.
 * The Key string would be used to identify the device, e.g. "GPS", and the data string ("sentence") from 
 * the device would be stored in the Text string.
 * Note that the EventMark is not associated with a Ping.
 * @param self Object pointer
 * @param key null-terminated character string 
 * @param text null-terminated character string 
 */
BVTSDK_EXPORT RetVal BVTSonar_PutEventMark(BVTSonar self, const char* key, const char* text);

/** Returns the number of EventMark objects in this file.  
 * @param self Object pointer
 * @param count number of event marks 
 * @returns count

 */
BVTSDK_EXPORT RetVal BVTSonar_GetEventMarkCount(BVTSonar self, int* count);

/** Retrieve an EventMark object from the file.
 * The index is zero-based, that is, if BVTSonar_GetEventMarkCount returned a value of 3, then valid indices are 0, 1, and 2.
 * @param self Object pointer
 * @param index index of EventMark to return 
 * @param em The returned EventMark object
 * @returns em

 */
BVTSDK_EXPORT RetVal BVTSonar_GetEventMarkCopy(BVTSonar self, int index, BVTEventMark* em);

/** Get the network settings of this Sonar.
 * The settings may not be valid until this Sonar is restarted.
 * @param self Object pointer
 * @param settings Allocated by this function.  Caller must destroy when done. 
 * @returns settings

 */
BVTSDK_EXPORT RetVal BVTSonar_GetNetworkSettings(BVTSonar self, BVTNetworkSettings* settings);

/** Set the network settings of this sonar. 
 * These settings will not be valid unti this Sonar is restarted.
 * @param self Object pointer
 * @param settings The network settings to apply to this Sonar. 
 */
BVTSDK_EXPORT RetVal BVTSonar_SetNetworkSettings(BVTSonar self, const BVTNetworkSettings settings);

/** Set to true to modify ping timestamps by the local computer's (running the SDK) clock.
 * \attention Disable if this Sonar is connected to a pulse-per-second (PPS) signal.
 * @param self Object pointer
 * @param enable True to modify ping timestamps by the local clock 
 */
BVTSDK_EXPORT RetVal BVTSonar_SetTimestampsUseLocalClock(BVTSonar self, int enable);

/** Returns true if ping timestamps are modified by the local computer's (running the SDK) clock.
 * @param self Object pointer
 * @param is_enabled True if ping timestamps are modified by the local clock 
 * @returns is_enabled

 */
BVTSDK_EXPORT RetVal BVTSonar_GetTimestampsUseLocalClock(BVTSonar self, int* is_enabled);

/** Generates a new file containing the current configuration of the sonar.	
 * The output should be sent to BlueView for analysis and is intended for diagnostic purposes.
 * @param self Object pointer
 * @param file The name of the file that will contain string 
 */
BVTSDK_EXPORT RetVal BVTSonar_DumpToFile(BVTSonar self, const char* file);

/** Indicates whether this sonar supports target tracking.
 * @param self Object pointer
 * @param supported true (1) if tracking supported, false (0) otherwise
 * @returns supported

 */
BVTSDK_EXPORT RetVal BVTSonar_SupportsTargetTracking(BVTSonar self, int* supported);

/** Latest generation BlueView sonar support source level (transmit power) control. This calls allows users to ascertain whether the sonar supports the source level control functionality.
 * @param self Object pointer
 * @param supported true (1) if supported, false (0) if unsupported 
 * @returns supported

 */
BVTSDK_EXPORT RetVal BVTSonar_SupportsSourceLevelControl(BVTSonar self, int* supported);

/** Set the sonar's transmit source level, only found on newer hardware. This will always disable the auto source level mode.
 * @param self Object pointer
 * @param level Ratio of desired value to max (0.0 to 1.0) 
 */
BVTSDK_EXPORT RetVal BVTSonar_SetSourceLevel(BVTSonar self, float level);

/** Get the sonar's source level (transmit power), only found on newer hardware.
 * @param self Object pointer
 * @param level See BVTSonar_SetSourceLevel 
 * @returns level

 */
BVTSDK_EXPORT RetVal BVTSonar_GetSourceLevel(BVTSonar self, float* level);

/** Sonar that support source level control can be configured to automatically adjust the source level based on the current configured max range. This call allows users to enable/disable this feature. 
 * @param self Object pointer
 * @param enable true (1) to enable, false (0) to disable 
 */
BVTSDK_EXPORT RetVal BVTSonar_EnableAutoSourceLevel(BVTSonar self, int enable);

/** Indicates whether sonar is configured to use automatic source level control.
 * @param self Object pointer
 * @param enabled true (1) if enabled, false (0) if disabled 
 * @returns enabled

 */
BVTSDK_EXPORT RetVal BVTSonar_IsAutoSourceLevelEnabled(BVTSonar self, int* enabled);

/** Return true if this sonar's hardware and firmware combination supports a hardware trigger.
 * \warning This function will return true even if a hardware trigger is NOT physically connected to the sonar but the firmware does support triggering.
 * \warning This function will return false even if you physically connect a hardware trigger but the firmware
 * does not support triggering.
 * @param self Object pointer
 * @param supported True if this sonar's hardware and firmware combination supports a hardware trigger. 
 * @returns supported

 */
BVTSDK_EXPORT RetVal BVTSonar_SupportsExternalHardwareTrigger(BVTSonar self, int* supported);

/** Enables the sonar to ping on receipt of an external trigger signal. Note that 
 * this requires a sonar equipped with a hardware trigger.
 * \warning Enabling this option on an unsupported sonar will cause it to stop
 * pinging until the option is turned off.
 * \warning Enabling external triggering will override any previous setting to
 * enable hardware trigger output. (These are mutually exclusive settings)
 * @param self Object pointer
 * @param delay Delay in millseconds between trigger pulse and pulse transmit. 
 */
BVTSDK_EXPORT RetVal BVTSonar_EnableExternalHardwareTrigger(BVTSonar self, int delay);

/** Turns hardware triggering off. 
 * @param self Object pointer
 */
BVTSDK_EXPORT RetVal BVTSonar_DisableExternalHardwareTrigger(BVTSonar self);

/** Enables the sonar to generate a 1 millisecond pulse on the hardware
 * trigger line whenever the trigger event occurs. This provides a
 * synchronization capability via hardware for multi-sensor systems. The trigger event
 * may be specified as the beginning of acoustic transmit, the end of acoustic transmit,
 * or the end of data acquisition.
 * \warning Enabling hardware trigger output will override any previous 
 * setting to enable external hardware trigger. (These are mutually exclusive settings)
 * @param self Object pointer
 * @param triggerEvent The event in the ping cycle that will induce the trigger signal 
 */
BVTSDK_EXPORT RetVal BVTSonar_EnableExternalHardwareTriggerOutput(BVTSonar self, int triggerEvent);

/** Queries whether hardware trigger is enabled. It is only valid for sonars equipped
 * with a hardware trigger.
 * @param self Object pointer
 * @param enabled On return specifies whether hardware trigger is enabled 
 * @returns enabled

 */
BVTSDK_EXPORT RetVal BVTSonar_GetExternalHardwareTriggerEnabled(BVTSonar self, int* enabled);

/** Queries the direction (input or output) of the hardware trigger. A hardware trigger
 * configured as input indicates that the sonar pings only on receipt of a trigger pulse.
 * A hardware trigger configured as output indicates that the sonar will emit a trigger
 * pulse during each ping. See BVTSonar_TriggerOutputEvent for the list of events in a ping 
 * sequence that can be configured as the pulse trigger event. This function is only
 * @param self Object pointer
 * @param is_input On return specifies hardware trigger direction 
 * @returns is_input

 */
BVTSDK_EXPORT RetVal BVTSonar_GetExternalHardwareTriggerDirection(BVTSonar self, int* is_input);

/** Only valid if the hardware trigger is configured as an input. See BVTSonar_EnableExternalHardwareTrigger
 * @param self Object pointer
 * @param delay_in_ms On return specfies the hardware trigger ping delay in milliseconds
 * @returns delay_in_ms

 */
BVTSDK_EXPORT RetVal BVTSonar_GetExternalHardwareTriggerInputDelay(BVTSonar self, int* delay_in_ms);

/** Only valid if the hardware trigger is configure as an output. 
 * See BVTSonar_EnableExternalHardwareTriggerOutput
 * @param self Object pointer
 * @param triggerEvent On return specifies the output trigger event 
 * @returns triggerEvent

 */
BVTSDK_EXPORT RetVal BVTSonar_GetExternalHardwareTriggerOutputEvent(BVTSonar self, int* triggerEvent);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif

/*
    This file has been generated by bvtidl.pl. DO NOT MODIFY!
*/
#ifndef __BVTORIENTATION_H__
#define __BVTORIENTATION_H__

#include <bvt_c/bvt_retval.h>

#ifndef DOXY_IGNORE
#ifdef _WIN32
#	ifdef BUILDING_BVTSDK
#		define BVTSDK_EXPORT __declspec(dllexport)
#	else
#		define BVTSDK_EXPORT __declspec(dllimport)
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && _MSC_VER >= 1310
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT __declspec(deprecated("This will be removed in a future version of the BlueView SDK"))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#else
#	if __GNUC__ >= 4
#		define BVTSDK_EXPORT __attribute__ ((visibility ("default")))
#	else
#		define BVTSDK_EXPORT
#	endif
#	if !defined(BVTSDK_NO_DEPRECATE) && ((__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 1)))
#		define BVTSDK_EXPORT_OBSOLETE BVT_EXPORT __attribute__((__deprecated__("This will be removed in a future version of the BlueView SDK")))
#	else
#		define BVTSDK_EXPORT_OBSOLETE BVTSDK_EXPORT
#	endif
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** @file
 * @defgroup BVTOrientation BVTOrientation
 * @brief
 * Orientation contains various types of user-accessible parameters useful for specifying the position
 * and orientation of a Head relative to the vessel or ROV.   Ping and Head contain Orientation objects, but
 * this interface allows Orientation objects to be stored independently of a Ping or Head.
 * The Orientation objects can be created and destroyed as needed.   This allows Orientation objects 
 * to be pre-allocated and filled from various instrument sources. It also allows the data to be copied from one
 * Orientation object to the other.
 * NOTE: Orientation objects will only be saved to a sonar of type FILE. 
 * @{
*/

/** Opaque type for BVTOrientation object instances */
typedef struct BVTOpaqueOrientation* BVTOrientation;

/** Create a BVTOrientation object */
BVTSDK_EXPORT BVTOrientation BVTOrientation_Create();
/** Destroy a BVTOrientation object
 *  @param obj Object pointer
*/
BVTSDK_EXPORT void BVTOrientation_Destroy(BVTOrientation obj);

#define BVTORIENTATION_OR_UNKNOWN	(int)(0)

#define BVTORIENTATION_OR_HEAD	(int)(1)

#define BVTORIENTATION_OR_POSITIONER	(int)(2)

#define BVTORIENTATION_OR_VEHICLE	(int)(3)

#define BVTORIENTATION_OR_LOCAL_LEVEL	(int)(4)

#define BVTORIENTATION_OR_MRU	(int)(5)

#define BVTORIENTATION_OR_GPS	(int)(6)

#define BVTORIENTATION_OR_IMU	(int)(7)

#define BVTORIENTATION_OR_ROV	(int)(8)

#define BVTORIENTATION_OR_UUV	(int)(9)

#define BVTORIENTATION_OR_OTHER	(int)(10)

#define BVTORIENTATION_OR_ROTATIONDIRECTION_UNKNOWN	(int)(0)

#define BVTORIENTATION_OR_ROTATIONDIRECTION_POSITIVE	(int)(1)

#define BVTORIENTATION_OR_ROTATIONDIRECTION_NEGATIVE	(int)(2)

#define BVTORIENTATION_OR_ROTATIONAXIS_UNKNOWN	(int)(0)

#define BVTORIENTATION_OR_ROTATIONAXIS_ROLL	(int)(1)

#define BVTORIENTATION_OR_ROTATIONAXIS_PITCH	(int)(2)

#define BVTORIENTATION_OR_ROTATIONAXIS_YAW	(int)(3)

#define BVTORIENTATION_OR_HEADORIENTATION_UNKNOWN	(int)(0)

#define BVTORIENTATION_OR_HEADORIENTATION_HORIZONTAL	(int)(1)

#define BVTORIENTATION_OR_HEADORIENTATION_VERTICAL	(int)(2)

/** Position and orientation of target (e.g. HEAD) relative to source (e.g. POSITIONER).
 * @param self Object pointer
 * @param source one of the OR_* constants 
 * @param target one of the OR_* constants 
 * @param X_axis_degrees rotation about the X axis 
 * @param Y_axis_degrees rotation about the Y axis 
 * @param Z_axis_degrees rotation about the Z axis 
 * @param X_axis_offset distance of target from source in the X axis (meters)  
 * @param Y_axis_offset distance of target from source in the Yaxis (meters)  
 * @param Z_axis_offset distance of target from source in the Z axis (meters)  
 */
BVTSDK_EXPORT RetVal BVTOrientation_SetData(BVTOrientation self, int source, int target, double X_axis_degrees, double Y_axis_degrees, double Z_axis_degrees, double X_axis_offset, double Y_axis_offset, double Z_axis_offset);

/** Position of the SOURCE relative to the TARGET.
 * @param self Object pointer
 * @param source one of the OR_* constants 
 * @returns source

 * @param target one of the OR_* constants 
 * @returns target

 * @param X_axis_degrees rotation about X axis 
 * @returns X_axis_degrees

 * @param Y_axis_degrees rotation about Y axis 
 * @returns Y_axis_degrees

 * @param Z_axis_degrees rotation about Z axis 
 * @returns Z_axis_degrees

 * @param X_axis_offset distance of target from source in the X axis (meters) 
 * @returns X_axis_offset

 * @param Y_axis_offset distance of target from soruce in the Y axis (meters) 
 * @returns Y_axis_offset

 * @param Z_axis_offset distance of target from soruce in the Z axis(meters) 
 * @returns Z_axis_offset

 */
BVTSDK_EXPORT RetVal BVTOrientation_GetData(BVTOrientation self, int* source, int* target, double* X_axis_degrees, double* Y_axis_degrees, double* Z_axis_degrees, double* X_axis_offset, double* Y_axis_offset, double* Z_axis_offset);

/** head_orientation describes how the sonar is oriented in the pan/tilt unit.  
 * Vertical indicates that the transducer plane is parallel to the pan/tilt unit's base (pan) motor.
 * Horizontal indicates that the transducer plane is parallel to the elbow (tilt) motor.
 * Describes how an increase/decrease in pan (x_raw_direction) and tilt (y_raw_direction) position changes the sonar position in the vessel coordinate system. 
 * Blueview convention is that the x axis is the hardware base motor which pans the sonar and the y axis is the elbow motor which tilts the sonar.
 * The z axis is currently not used.
 * @param self Object pointer
 * @param head_orientation one of the OR_HEADORIENTATION_* constants 
 * @param x_raw_direction one of the OR_ROTATIONDIRECTION_* constants 
 * @param x_axis_affected one of the OR_ROTATIONAXIS_* constants 
 * @param x_axis_direction one of the OR_ROTATIONDIRECTION_* constants 
 * @param y_raw_direction one of the OR_ROTATIONDIRECTION_* constants 
 * @param y_axis_affected one of the OR_ROTATIONAXIS_* constants 
 * @param y_axis_direction one of the OR_ROTATIONDIRECTION_* constants 
 * @param z_raw_direction one of the OR_ROTATIONDIRECTION_* constants 
 * @param z_axis_affected one of the OR_ROTATIONAXIS_* constants 
 * @param z_axis_direction one of the OR_ROTATIONDIRECTION_* constants 
 */
BVTSDK_EXPORT RetVal BVTOrientation_SetPanTiltCalibrationData(BVTOrientation self, int head_orientation, int x_raw_direction, int x_axis_affected, int x_axis_direction, int y_raw_direction, int y_axis_affected, int y_axis_direction, int z_raw_direction, int z_axis_affected, int z_axis_direction);

/** head_orientation describes how the sonar is oriented in the pan/tilt unit.  
 * Vertical indicates that the transducer plane is parallel to the pan/tilt unit's base (pan) motor.
 * Horizontal indicates that the transducer plane is parallel to the elbow (tilt) motor.
 * Describes how an increase/decrease in pan (x_raw_direction) and tilt (y_raw_direction) position changes the sonar position in the vessel coordinate system. 
 * Blueview convention is that the x axis is the hardware base motor which pans the sonar and the y axis is the elbow motor which tilts the sonar.
 * The z axis is currently not used.
 * @param self Object pointer
 * @param head_orientation one of the OR_HEADORIENTATION_* constants 
 * @returns head_orientation

 * @param x_raw_direction one of the OR_ROTATIONDIRECTION_* constants 
 * @returns x_raw_direction

 * @param x_axis_affected one of the OR_ROTATIONAXIS_* constants 
 * @returns x_axis_affected

 * @param x_axis_direction one of the OR_ROTATIONDIRECTION_* constants 
 * @returns x_axis_direction

 * @param y_raw_direction one of the OR_ROTATIONDIRECTION_* constants 
 * @returns y_raw_direction

 * @param y_axis_affected one of the OR_ROTATIONAXIS_* constants 
 * @returns y_axis_affected

 * @param y_axis_direction one of the OR_ROTATIONDIRECTION_* constants 
 * @returns y_axis_direction

 * @param z_raw_direction one of the OR_ROTATIONDIRECTION_* constants 
 * @returns z_raw_direction

 * @param z_axis_affected one of the OR_ROTATIONAXIS_* constants 
 * @returns z_axis_affected

 * @param z_axis_direction one of the OR_ROTATIONDIRECTION_* constants 
 * @returns z_axis_direction

 */
BVTSDK_EXPORT RetVal BVTOrientation_GetPanTiltCalibrationData(BVTOrientation self, int* head_orientation, int* x_raw_direction, int* x_axis_affected, int* x_axis_direction, int* y_raw_direction, int* y_axis_affected, int* y_axis_direction, int* z_raw_direction, int* z_axis_affected, int* z_axis_direction);

/** Return the timestamp in seconds since 00:00:00 UTC, January 1, 1970 
 * The timestamp is a standard UNIX time stamp. This is 
 * a similar value to that returned by the time() C standard library 
 * function. In fact, the only difference is the addition of fractional seconds.
 * @param self Object pointer
 * @param timestamp orientation timestamp 
 * @returns timestamp

 */
BVTSDK_EXPORT RetVal BVTOrientation_GetTimestamp(BVTOrientation self, double* timestamp);

/** Set the time stamp.  
 * @param self Object pointer
 * @param sec Timestamp in seconds since 00:00:00 UTC, January 1, 1970 
 */
BVTSDK_EXPORT RetVal BVTOrientation_SetTimestamp(BVTOrientation self, double sec);

/** @}*/

#ifdef __cplusplus
}
#endif

#endif

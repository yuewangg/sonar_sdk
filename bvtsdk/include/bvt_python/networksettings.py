"""
This file was generated by bvtidl.pl.
Your changes will most likely be lost.
"""

from ctypes import *
import sys
import sdkerror


class NetworkSettings(object):
    """
    Various network-related parameters.
    \warning You should not modify these settings unless you carefully record the new
    parameters!
    \note A sonar will typically only apply these
    parameters once per power cycle, at boot.
    """
    def __init__(self, handle):
        super(NetworkSettings, self).__setattr__("_initialized", False)
        self._deleted = False
        if handle is None or type(handle) is not c_void_p:
            raise Exception("Class NetworkSettings cannot be directly instantiated")
        else:
            self._handle = handle
        super(NetworkSettings, self).__setattr__("_initialized", True)

    def __del__(self):
        self._deleted = True
        dll.BVTNetworkSettings_Destroy(self._handle)

    def __setattr__(self, name, value):
        """ Don't allow setting non-existent attributes on this class
        """
        if self._initialized and not hasattr(self, name):
            raise AttributeError("%s instance has no attribute '%s'" % (self.__class__.__name__, name))
        super(NetworkSettings, self).__setattr__(name, value)

    @property
    def address_mode(self):
        """
        Get the method by which the sonar obtains an IP address.
        """
        mode = c_int()
        error_code = dll.BVTNetworkSettings_GetAddressMode(self._handle, byref(mode))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return mode.value

    @address_mode.setter
    def address_mode(self, mode):
        """
        Set the method by which the sonar obtains an IP address. 
        """
        error_code = dll.BVTNetworkSettings_SetAddressMode(self._handle, ( c_int(mode) ))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def ipv4_address(self):
        """
        Get the sonar's IP address.
        """
        addressLength = 255
        address = create_string_buffer(buffer_size)
        error_code = dll.BVTNetworkSettings_GetIPv4Address(self._handle, address, addressLength)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (address.value)

    @ipv4_address.setter
    def ipv4_address(self, address):
        """
        Set the sonar's static IP address.
        \attention Requires AddressMode to be STATIC
        """
        error_code = dll.BVTNetworkSettings_SetIPv4Address(self._handle, (address))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def subnet_mask(self):
        """
        Get the sonar's subnet mask address.
        """
        maskLength = 255
        mask = create_string_buffer(buffer_size)
        error_code = dll.BVTNetworkSettings_GetSubnetMask(self._handle, mask, maskLength)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (mask.value)

    @subnet_mask.setter
    def subnet_mask(self, mask):
        """
        Set the sonar's static subnet mask.
        \attention Requires AddressMode to be STATIC
        """
        error_code = dll.BVTNetworkSettings_SetSubnetMask(self._handle, (mask))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def gateway(self):
        """
        Get the sonar's gateway address.
        """
        gatewayLength = 255
        gateway = create_string_buffer(buffer_size)
        error_code = dll.BVTNetworkSettings_GetGateway(self._handle, gateway, gatewayLength)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (gateway.value)

    @gateway.setter
    def gateway(self, gateway):
        """
        Set the sonar's gateway.
        \attention Requires AddressMode to be STATIC
        """
        error_code = dll.BVTNetworkSettings_SetGateway(self._handle, (gateway))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def dhcp_server_enabled(self):
        """
        If true the sonar will launch a DHCP server at boot.
        """
        is_enabled = c_int()
        error_code = dll.BVTNetworkSettings_GetDHCPServerEnabled(self._handle, byref(is_enabled))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return is_enabled.value > 0

    @dhcp_server_enabled.setter
    def dhcp_server_enabled(self, enable):
        """
        Set this to true if you want the sonar to launch a DHCP server at boot.
        \warning You must not set this to true if the AddressMode is DHCP_CLIENT
        """
        error_code = dll.BVTNetworkSettings_SetDHCPServerEnabled(self._handle, ( 1 if enable else 0))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def ipv4_multicast_address(self):
        """
        Get the sonar's IPv4 multicast address.
        \attention This is experimental
        \see GetPingMulticast
        """
        addressLength = 255
        address = create_string_buffer(buffer_size)
        error_code = dll.BVTNetworkSettings_GetIPv4MulticastAddress(self._handle, address, addressLength)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return (address.value)

    @ipv4_multicast_address.setter
    def ipv4_multicast_address(self, address):
        """
        Set the sonar's IPv4 multicast address.
        \attention This is experimental
        \see GetPingMulticast
        """
        error_code = dll.BVTNetworkSettings_SetIPv4MulticastAddress(self._handle, (address))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    ADDRESSMODE_DHCP_CLIENT = 1
    ADDRESSMODE_STATIC = 2

    def get_handle(self):
        """
        SDK object pointer
        """
        return self._handle
if "win32" in sys.platform:
    dll_name = "bvtsdk4.dll"
elif "darwin" in sys.platform:
    dll_name = "libbvtsdk.dylib"
else:
    dll_name = "libbvtsdk.so"
dll = CDLL(dll_name)
dll.BVTNetworkSettings_Destroy.restype = None
dll.BVTNetworkSettings_Destroy.argtypes = (c_void_p,)
dll.BVTNetworkSettings_GetAddressMode.restype = c_int
dll.BVTNetworkSettings_GetAddressMode.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTNetworkSettings_SetAddressMode.restype = c_int
dll.BVTNetworkSettings_SetAddressMode.argtypes = (c_void_p, c_int, )
dll.BVTNetworkSettings_GetIPv4Address.restype = c_int
dll.BVTNetworkSettings_GetIPv4Address.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTNetworkSettings_SetIPv4Address.restype = c_int
dll.BVTNetworkSettings_SetIPv4Address.argtypes = (c_void_p, c_char_p, )
dll.BVTNetworkSettings_GetSubnetMask.restype = c_int
dll.BVTNetworkSettings_GetSubnetMask.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTNetworkSettings_SetSubnetMask.restype = c_int
dll.BVTNetworkSettings_SetSubnetMask.argtypes = (c_void_p, c_char_p, )
dll.BVTNetworkSettings_GetGateway.restype = c_int
dll.BVTNetworkSettings_GetGateway.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTNetworkSettings_SetGateway.restype = c_int
dll.BVTNetworkSettings_SetGateway.argtypes = (c_void_p, c_char_p, )
dll.BVTNetworkSettings_GetDHCPServerEnabled.restype = c_int
dll.BVTNetworkSettings_GetDHCPServerEnabled.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTNetworkSettings_SetDHCPServerEnabled.restype = c_int
dll.BVTNetworkSettings_SetDHCPServerEnabled.argtypes = (c_void_p, c_int, )
dll.BVTNetworkSettings_GetIPv4MulticastAddress.restype = c_int
dll.BVTNetworkSettings_GetIPv4MulticastAddress.argtypes = (c_void_p, c_char_p, c_int, )
dll.BVTNetworkSettings_SetIPv4MulticastAddress.restype = c_int
dll.BVTNetworkSettings_SetIPv4MulticastAddress.argtypes = (c_void_p, c_char_p, )


from bvt_python.colorimage import *
from bvt_python.error import *

"""
This file was generated by bvtidl.pl.
Your changes will most likely be lost.
"""

from ctypes import *
import sys
import sdkerror


class ColorMapper(object):
    """
    Provide support for applying a colormap to a MagImage, thus 
    generating a ColorImage.
    """
    def __init__(self, handle=None):
        super(ColorMapper, self).__setattr__("_initialized", False)
        self._deleted = False
        if handle is None:
            self._handle = dll.BVTColorMapper_Create()
        else:
            self._handle = handle
        super(ColorMapper, self).__setattr__("_initialized", True)

    def __del__(self):
        self._deleted = True
        dll.BVTColorMapper_Destroy(self._handle)

    def __setattr__(self, name, value):
        """ Don't allow setting non-existent attributes on this class
        """
        if self._initialized and not hasattr(self, name):
            raise AttributeError("%s instance has no attribute '%s'" % (self.__class__.__name__, name))
        super(ColorMapper, self).__setattr__(name, value)

    def load(self, file):
        """
        Load a color map file.
        """
        error_code = dll.BVTColorMapper_Load(self._handle, (file))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def gamma(self):
        """
        Return the current gamma.
        """
        gamma = c_float()
        error_code = dll.BVTColorMapper_GetGamma(self._handle, byref(gamma))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return gamma.value

    @gamma.setter
    def gamma(self, gamma):
        """
        Set the gamma used when colormapping.
        """
        error_code = dll.BVTColorMapper_SetGamma(self._handle, gamma)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def set_thresholds(self, top, bottom):
        """
        Set the intensity values to be mapped to the top and bottom of the colormap. 
        If auto intensity is enabled, this function returns an error.
        """
        error_code = dll.BVTColorMapper_SetThresholds(self._handle, top, bottom)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def top_threshold(self):
        """
        Return the upper threshold for the colormap.  The top threshold is also
        known as 'intensity'.  Lowering the top threshold will make a brighter image.
        """
        threshold = c_int()
        error_code = dll.BVTColorMapper_GetTopThreshold(self._handle, byref(threshold))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return threshold.value

    @property
    def bottom_threshold(self):
        """
        Return the lower threshold for the colormap.
        """
        threshold = c_int()
        error_code = dll.BVTColorMapper_GetBottomThreshold(self._handle, byref(threshold))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return threshold.value

    @property
    def auto_mode(self):
        """
        Return true if auto-threshold is enabled, false if it's not.
        """
        is_enabled = c_int()
        error_code = dll.BVTColorMapper_GetAutoMode(self._handle, byref(is_enabled))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return is_enabled.value > 0

    @auto_mode.setter
    def auto_mode(self, enable):
        """
        Enable or disable an internal auto-threshold algorithm.
        """
        error_code = dll.BVTColorMapper_SetAutoMode(self._handle, ( 1 if enable else 0))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def auto_mode_top_threshold_minimum(self):
        """
        Get the lowest value the top threshold is allowed to attain while auto mode is enabled.
        """
        top_minimum = c_int()
        error_code = dll.BVTColorMapper_GetAutoModeTopThresholdMinimum(self._handle, byref(top_minimum))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return top_minimum.value

    @auto_mode_top_threshold_minimum.setter
    def auto_mode_top_threshold_minimum(self, top_minimum):
        """
        Set the lowest value the top threshold is allowed to attain while auto mode is enabled.
        """
        error_code = dll.BVTColorMapper_SetAutoModeTopThresholdMinimum(self._handle, top_minimum)
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def pixel_intensity(self, color):
        """
        Inverts the color mapping process to determine the intensity value for a given image pixel.
        If the color provided is not an entry of this colormap, the returned intensity is zero.
        """
        intensity = c_ushort()
        error_code = dll.BVTColorMapper_PixelIntensity(self._handle, color, byref(intensity))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return intensity.value

    def map_image(self, input):
        """
        Apply a colormap to an intensity image to produce a ColorImage.
        """
        output_ptr = c_void_p()
        error_code = dll.BVTColorMapper_MapImage(self._handle, input._handle, byref(output_ptr))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        output = ColorImage(output_ptr)
        return output

    def get_top_color(self, r, g, b):
        """
        Gets the RGB color that is mapped to a maximum intensity return
        """
        error_code = dll.BVTColorMapper_GetTopColor(self._handle, byref(r), byref(g), byref(b))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    def get_bottom_color(self, r, g, b):
        """
        Gets the RGB color that is mapped to a minimum intensity return
        """
        error_code = dll.BVTColorMapper_GetBottomColor(self._handle, byref(r), byref(g), byref(b))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)

    @property
    def color_values_count(self):
        """
        Return the number of color entries in this colormap.
        """
        count = c_int()
        error_code = dll.BVTColorMapper_GetColorValuesCount(self._handle, byref(count))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)
        return count.value

    def get_color_value(self, index, red, green, blue, alpha):
        """
        Return the color of the entry at the specified index.
        """
        error_code = dll.BVTColorMapper_GetColorValue(self._handle, index, byref(red), byref(green), byref(blue), byref(alpha))
        if (0 != error_code):
            raise sdkerror.SDKError(error_code)


    def get_handle(self):
        """
        SDK object pointer
        """
        return self._handle
if "win32" in sys.platform:
    dll_name = "bvtsdk4.dll"
elif "darwin" in sys.platform:
    dll_name = "libbvtsdk.dylib"
else:
    dll_name = "libbvtsdk.so"
dll = CDLL(dll_name)
dll.BVTColorMapper_Create.restype = c_void_p
dll.BVTColorMapper_Destroy.restype = None
dll.BVTColorMapper_Destroy.argtypes = (c_void_p,)
dll.BVTColorMapper_Load.restype = c_int
dll.BVTColorMapper_Load.argtypes = (c_void_p, c_char_p, )
dll.BVTColorMapper_GetGamma.restype = c_int
dll.BVTColorMapper_GetGamma.argtypes = (c_void_p, POINTER(c_float), )
dll.BVTColorMapper_SetGamma.restype = c_int
dll.BVTColorMapper_SetGamma.argtypes = (c_void_p, c_float, )
dll.BVTColorMapper_SetThresholds.restype = c_int
dll.BVTColorMapper_SetThresholds.argtypes = (c_void_p, c_int, c_int, )
dll.BVTColorMapper_GetTopThreshold.restype = c_int
dll.BVTColorMapper_GetTopThreshold.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTColorMapper_GetBottomThreshold.restype = c_int
dll.BVTColorMapper_GetBottomThreshold.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTColorMapper_GetAutoMode.restype = c_int
dll.BVTColorMapper_GetAutoMode.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTColorMapper_SetAutoMode.restype = c_int
dll.BVTColorMapper_SetAutoMode.argtypes = (c_void_p, c_int, )
dll.BVTColorMapper_GetAutoModeTopThresholdMinimum.restype = c_int
dll.BVTColorMapper_GetAutoModeTopThresholdMinimum.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTColorMapper_SetAutoModeTopThresholdMinimum.restype = c_int
dll.BVTColorMapper_SetAutoModeTopThresholdMinimum.argtypes = (c_void_p, c_int, )
dll.BVTColorMapper_PixelIntensity.restype = c_int
dll.BVTColorMapper_PixelIntensity.argtypes = (c_void_p, c_int, POINTER(c_ushort), )
dll.BVTColorMapper_MapImage.restype = c_int
dll.BVTColorMapper_MapImage.argtypes = (c_void_p, c_void_p, POINTER(c_void_p), )
dll.BVTColorMapper_GetTopColor.restype = c_int
dll.BVTColorMapper_GetTopColor.argtypes = (c_void_p, POINTER(c_uint), POINTER(c_uint), POINTER(c_uint), )
dll.BVTColorMapper_GetBottomColor.restype = c_int
dll.BVTColorMapper_GetBottomColor.argtypes = (c_void_p, POINTER(c_uint), POINTER(c_uint), POINTER(c_uint), )
dll.BVTColorMapper_GetColorValuesCount.restype = c_int
dll.BVTColorMapper_GetColorValuesCount.argtypes = (c_void_p, POINTER(c_int), )
dll.BVTColorMapper_GetColorValue.restype = c_int
dll.BVTColorMapper_GetColorValue.argtypes = (c_void_p, c_int, POINTER(c_uint), POINTER(c_uint), POINTER(c_uint), POINTER(c_uint), )

